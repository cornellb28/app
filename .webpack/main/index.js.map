{"version":3,"file":"index.js","mappings":"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O;AACP;;AAEA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,EAAE,EAAE,mBAAO,CAAC,2DAAa;AACzB;AACA;AACA;;;AAGA,kCAAkC;AAClC;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2CAA2C,aAAa,6BAA6B,IAAI;AACzF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,2BAA2B;AAC3B;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,4BAA4B;AAC5B;;;AAGA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,KAAK;AACL,IAAI;;;AAGJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,GAAG;;AAEV;AACA,+CAA+C;;AAE/C;AACA;AACA,IAAI;;AAEJ;AACA;AACA,GAAG;AACH;AACA;;AAEA;;;;;;;;;;;ACtZa;;AAEb,cAAc,mBAAO,CAAC,mDAAS;;AAE/B,mCAAmC;AACnC,oCAAoC;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;AChCa;;AAEb,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA,YAAY;AACZ;AACA;AACA;;;AAGA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,oBAAoB;AACpB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA,cAAc;AACd;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;;AAGA,eAAe;AACf;;AAEA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;;;;AC1HA,WAAW,mBAAO,CAAC,kBAAM;;AAEzB,YAAY,iEAA8B;;AAE1C,YAAY,mBAAO,CAAC,uFAAO;;AAE3B,UAAU,qDAAuB;;AAEjC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA,UAAU,+HAAmC;AAC7C,WAAW;AACX,kBAAkB;AAClB,YAAY;AACZ,YAAY;AACZ,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;;AAEA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,oBAAoB;AACpB;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;;;AAGA;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,qBAAqB;AAC3B;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA,IAAI,aAAa;;;AAGjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;;;;;;;;;;AC5JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe;AACf,cAAc;AACd,eAAe;AACf,qHAAgC;AAChC;AACA;AACA;;AAEA,aAAa;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;;AAGA;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;;AAEA,oBAAoB,iBAAiB;AACrC;AACA;;AAEA;;AAEA;AACA;AACA;AACA,MAAM;;;AAGN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C;;AAE3C;AACA;AACA;;AAEA;AACA,KAAK,GAAG;;AAER;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wCAAwC;;AAExC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;;;AAGA;AACA;AACA,EAAE,aAAa;AACf,EAAE,aAAa;AACf;AACA;;AAEA,kBAAkB,SAAS;AAC3B,6BAA6B;;AAE7B;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;;AAGA;AACA;;AAEA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;;AAEA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;;AAGA;AACA;AACA;AACA;;;;;;;;;;AClMA;AACA;AACA;AACA;AACA;AACA,EAAE,sIAAwC;AAC1C,EAAE;AACF,EAAE,gIAAqC;AACvC;;;;;;;;;;ACRA;AACA;AACA;AACA,UAAU,mBAAO,CAAC,gBAAK;;AAEvB,WAAW,mBAAO,CAAC,kBAAM;AACzB;AACA;AACA;AACA;AACA;;;AAGA,UAAU,+HAAmC;AAC7C,YAAY;AACZ,WAAW;AACX,kBAAkB;AAClB,YAAY;AACZ,YAAY;AACZ,iBAAiB;AACjB;AACA;AACA;;AAEA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA,mBAAmB;AACnB;AACA,CAAC;AACD;AACA;AACA;AACA,GAAG,GAAG;;AAEN;AACA,uDAAuD,6DAA6D,oCAAoC;AACxJ;AACA;AACA,CAAC,IAAI;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,+BAA+B;AAC/B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA,oBAAoB;AACpB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;AAGA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC;AACtC;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,8CAA8C;;AAE9C;AACA;AACA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,eAAe,mBAAO,CAAC,cAAI;;AAE3B;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA,gBAAgB,mBAAO,CAAC,gBAAK;;AAE7B;AACA;AACA;AACA;AACA,OAAO,GAAG;AACV;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;;;;ACrOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;AC/Ja;;AAEb,oBAAoB,mBAAO,CAAC,wEAAkB;;AAE9C,uBAAuB,mBAAO,CAAC,8EAAqB;;AAEpD,gBAAgB,mBAAO,CAAC,0EAAmB;;AAE3C,iBAAiB,mBAAO,CAAC,4EAAoB;;AAE7C,eAAe,mBAAO,CAAC,wEAAkB;;AAEzC,mBAAmB,mBAAO,CAAC,4DAAY;;AAEvC,cAAc,mBAAO,CAAC,4DAAS;;AAE/B;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC,4BAA4B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AC1Fa;;AAEb,8CAA6C;AAC7C;AACA,CAAC,EAAC;AACF,8BAA8B,GAAG,iBAAiB;AAClD;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,GAAG;;AAEpC;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8BAA8B;;;;;;;;;;;AC5BjB;;AAEb,8CAA6C;AAC7C;AACA,CAAC,EAAC;AACF,iCAAiC,GAAG,mCAAmC,GAAG,oCAAoC,GAAG,qCAAqC,GAAG,2BAA2B,GAAG,8BAA8B,GAAG,gBAAgB;;AAExO,cAAc,mBAAO,CAAC,6DAAU;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA,8BAA8B;;AAE9B;AACA;AACA;;AAEA,2BAA2B;;AAE3B;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA,GAAG;AACH;;AAEA,oCAAoC;;AAEpC;AACA;AACA;AACA,GAAG;AACH;;AAEA,mCAAmC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;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gCAAgC,GAAG,gCAAgC,GAAG,wBAAwB,GAAG,uBAAuB;;AAEhpB,aAAa,mBAAO,CAAC,kBAAM;;AAE3B,mBAAmB,mBAAO,CAAC,wDAAa;;AAExC,mBAAmB,mBAAO,CAAC,sDAAY;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8CAA8C;AAC9C;AACA;;AAEA,uBAAuB;;AAEvB,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB;;AAExB;AACA,8CAA8C;;AAE9C;AACA;AACA;;AAEA,8CAA8C;;AAE9C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gCAAgC;;AAEhC;AACA;AACA;;AAEA,gCAAgC;;AAEhC;AACA;AACA;;AAEA,yBAAyB;;AAEzB;AACA;AACA;;AAEA,yBAAyB;;AAEzB;AACA;AACA;;AAEA,2BAA2B;;AAE3B;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,0CAA0C;;AAE1C;AACA;AACA;;AAEA,yCAAyC;;AAEzC;AACA;AACA;AACA,GAAG;AACH;;AAEA,wBAAwB;;AAExB;AACA;AACA;;AAEA,mBAAmB;;AAEnB;AACA;AACA;;AAEA,6BAA6B;;AAE7B;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;AACA,GAAG;AACH;;AAEA,wCAAwC;;AAExC;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,4BAA4B;;AAE5B;AACA;AACA;AACA,IAAI,yDAAyD;AAC7D;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB;;AAEvB;AACA;AACA;;AAEA,cAAc;;AAEd;AACA;AACA;;AAEA,2BAA2B;;AAE3B;AACA;AACA;;AAEA,gBAAgB;;;;;;;;;;;AC9OH;;AAEb,8CAA6C;AAC7C;AACA,CAAC,EAAC;AACF,aAAa;;AAEb,eAAe,mBAAO,CAAC,8CAAQ;;AAE/B;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA,aAAa;;AAEb;AACA;AACA;;;;;;;;;;;ACvBa;;AAEb,8CAA6C;AAC7C;AACA,CAAC,EAAC;AACF,eAAe,GAAG,gBAAgB;;AAElC;AACA;AACA;;AAEA,gBAAgB;;AAEhB;AACA;AACA;;AAEA,eAAe;;;;;;;;;;;ACjBF;AACb;;AAEA,cAAc,mBAAO,CAAC,kDAAS;;AAE/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP,KAAK,GAAG;AACR;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP,KAAK,GAAG;AACR;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,sBAAsB;;;;;;;;;;;ACnRtB;AACA;AACA;AACA;AACA;AACA;AACa;;AAEb,aAAa,mBAAO,CAAC,kBAAM;;AAE3B,qBAAqB,mBAAO,CAAC,8DAAgB;;AAE7C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB,OAAO,EAAE,0BAA0B;AACxD;;AAEA;AACA,gBAAgB,UAAU,GAAG,UAAU;AACvC,IAAI;AACJ;AACA;;AAEA;AACA,eAAe,OAAO,EAAE,OAAO;AAC/B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,aAAa,MAAM,GAAG,KAAK;AAC3B;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,OAAO,EAAE,gBAAgB;AAC/C;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C,KAAK;AAC/C;;AAEA;AACA;;AAEA,uDAAuD;AACvD;AACA;;AAEA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA,uDAAuD;AACvD;AACA;AACA;;AAEA;;AAEA,aAAa,MAAM;AACnB,aAAa,IAAI;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA,4CAA4C;AAC5C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;AC7Qa;;AAEb,aAAa,mBAAO,CAAC,gDAAS;;AAE9B,uBAAuB,uDAA6B;;AAEpD,cAAc,8CAAsB;AACpC;AACA;AACA,oBAAoB,QAAQ;AAC5B,2BAA2B;AAC3B,qCAAqC,EAAE;AACvC;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,aAAa;AACb;;AAEA;AACA;AACA;AACA,GAAG,SAAS;;AAEZ;AACA;AACA,IAAI;;;AAGJ;AACA;AACA,IAAI;;;AAGJ,cAAc;;AAEd;AACA;AACA,IAAI,yCAAyC;;;AAG7C;AACA;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,sDAAY;;AAEpC;AACA,IAAI,KAAK;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mDAAmD,0BAA0B;AAC7E,sCAAsC;;AAEtC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B;;AAE3B;AACA;AACA;;AAEA;AACA;;;;;;;;;;;AC3KA;AACA;AACA;AACA;AACA;AACA;AACa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;AClBa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,mBAAO,CAAC,sBAAQ;;AAE/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,4CAA4C,SAAS;AACrD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ;;;AAGR;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAO,GAAG;;AAEV;AACA;;AAEA,oBAAoB,oBAAoB;AACxC;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB;;AAErB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA,EAAE;;;AAGF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI;AACJ,0CAA0C,SAAS;AACnD;AACA;AACA;;AAEA;AACA;;;;;;;;;;;AClKa;;AAEb,aAAa,mBAAO,CAAC,kBAAM;;AAE3B,eAAe,mBAAO,CAAC,8CAAQ;;AAE/B,kBAAkB,mBAAO,CAAC,oDAAW;;AAErC,cAAc,mBAAO,CAAC,kEAAqB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,WAAW,sBAAsB;AACjC,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kBAAkB,qBAAqB;AACvC,mDAAmD;AACnD;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,+CAA+C,oBAAoB;AACnE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,gCAAgC;AAChC;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,UAAU;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD,0CAA0C;AAC1C;AACA,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,YAAY,SAAS;AACrB;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB;AACA;;AAEA,8CAA8C;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qDAAqD;AACrD;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,YAAY,SAAS;AACrB;AACA;;;AAGA;AACA;AACA,+CAA+C,kBAAkB;AACjE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,4CAA4C;AAC5C;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,UAAU;AACV;AACA,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,YAAY,SAAS;AACrB;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,YAAY,SAAS;AACrB;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,YAAY,SAAS;AACrB;AACA;;;AAGA;AACA;AACA,+CAA+C,kBAAkB;AACjE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,YAAY;AACxB;AACA;;;AAGA;AACA;AACA,+CAA+C;AAC/C;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,4BAA4B,MAAM;AAClC;AACA;AACA,4BAA4B,MAAM,SAAS,cAAc;AACzD;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;;AAGA;AACA;;AAEA,iDAAiD,IAAI;AACrD;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,sCAAsC;AACtC;AACA,GAAG;AACH;AACA;AACA;AACA;;;AAGA;;;;;;;;;;;ACzea;;AAEb,wGAA2C;;;;;;;;;;;ACF9B;;AAEb,aAAa,mBAAO,CAAC,kBAAM;;AAE3B;AACA,0BAA0B,UAAU;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,cAAc;AACvC,6BAA6B,cAAc;AAC3C,sBAAsB,aAAa,IAAI,EAAE,WAAW;AACpD,qBAAqB,YAAY;AACjC,sBAAsB,aAAa,EAAE,WAAW;AAChD,2BAA2B,aAAa,IAAI,EAAE,WAAW;AACzD,4BAA4B,WAAW;AACvC,2BAA2B,cAAc;AACzC,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB,qBAAqB,UAAU;AAC/B;AACA,WAAW,aAAa;AACxB,iBAAiB,aAAa,IAAI,MAAM,UAAU;AAClD,gBAAgB,YAAY;AAC5B,uBAAuB,UAAU,IAAI,aAAa,IAAI,MAAM,UAAU;AACtE,sBAAsB,aAAa,IAAI,MAAM,UAAU;AACvD,uBAAuB,aAAa,IAAI,MAAM,UAAU;AACxD,sBAAsB,UAAU;AAChC,yBAAyB,UAAU;AACnC,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6CAA6C;AAC7C,kCAAkC;AAClC;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,OAAO;AACP;;AAEA;AACA;;AAEA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AC7Qa;;AAEb,kBAAkB,mBAAO,CAAC,8DAAa;;AAEvC,cAAc,mBAAO,CAAC,sDAAS;AAC/B;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,eAAe;;AAEnC;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA,oBAAoB,KAAK,KAAK,KAAK,eAAe,KAAK;AACvD;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY;AACZ;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,2CAA2C,IAAI,oCAAoC,IAAI;AACvF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA,eAAe,QAAQ,QAAQ,aAAa,EAAE,oCAAoC;AAClF;;AAEA;AACA;AACA;;AAEA;AACA,eAAe,KAAK;AACpB,IAAI;;;AAGJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sCAAsC,YAAY;AAClD;;AAEA;AACA,wEAAwE,OAAO;AAC/E;AACA,sDAAsD,OAAO;AAC7D;AACA;AACA,yCAAyC;AACzC;AACA,SAAS;AACT,mCAAmC,WAAW,GAAG,YAAY;AAC7D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,4BAA4B,EAAE;AAC9B,KAAK;;AAEL;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA,qCAAqC;AACrC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ;;;AAGR;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,MAAM;AAC3B;;AAEA;AACA,qBAAqB,MAAM;AAC3B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,MAAM;AAC3B,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,MAAM;AAC7B,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,MAAM;AAC7B,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA,oBAAoB,MAAM;AAC1B;;AAEA;AACA;AACA;AACA,OAAO,GAAG;AACV;;AAEA;AACA;AACA;;AAEA;AACA,gEAAgE;AAChE;;AAEA;AACA;AACA;AACA;AACA,QAAQ;;;AAGR,uBAAuB,QAAQ,EAAE,QAAQ,GAAG,WAAW;AACvD;AACA;AACA;AACA;AACA;AACA;;;AAGA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,qCAAqC,QAAQ;AAC7C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC;AACzC,6BAA6B;AAC7B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;;AAEpB;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wBAAwB,MAAM;AAC9B;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,qBAAqB,MAAM;AAC3B;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ;;;AAGR;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,aAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,aAAa;AAC1C;AACA,yBAAyB,eAAe,EAAE,cAAc,GAAG,cAAc,EAAE,IAAI;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,cAAc,GAAG,eAAe,EAAE,cAAc;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ;;;AAGR,iEAAiE;;AAEjE;AACA;AACA,2BAA2B;;AAE3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,qFAAqF;AACrF,oDAAoD;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B,KAAK;AACL,IAAI;;;AAGJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,2CAA2C,IAAI,oCAAoC,IAAI;AACvF;;AAEA;AACA,0CAA0C;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,KAAK;AACpB;;AAEA;AACA;AACA,eAAe,QAAQ,QAAQ,aAAa,EAAE,oCAAoC;AAClF;;AAEA;AACA;AACA;AACA,kBAAkB,MAAM,EAAE,SAAS,EAAE,KAAK;;AAE1C;AACA,kBAAkB,YAAY,EAAE,SAAS,EAAE,KAAK;;AAEhD;AACA,kBAAkB,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,SAAS,EAAE,KAAK;;AAE/D;AACA,kBAAkB,MAAM,EAAE,KAAK,EAAE,cAAc,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK;;AAE5E;AACA;;AAEA;AACA,qBAAqB,MAAM,EAAE,eAAe,EAAE,cAAc,IAAI,SAAS,EAAE,SAAS,EAAE,KAAK;;AAE3F;AACA,qBAAqB,MAAM,EAAE,eAAe,EAAE,cAAc,IAAI,SAAS,EAAE,KAAK,EAAE,YAAY,EAAE,SAAS,EAAE,KAAK;;AAEhH;AACA,qBAAqB,MAAM,EAAE,eAAe,EAAE,cAAc,IAAI,YAAY,EAAE,SAAS,EAAE,KAAK;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,cAAc;AAC/B;;AAEA;AACA;;AAEA;;;;;;;;;;;ACrtCa;;AAEb,aAAa,mBAAO,CAAC,kBAAM;;AAE3B,aAAa,mBAAO,CAAC,oDAAQ;;AAE7B,cAAc,mBAAO,CAAC,sDAAS;;AAE/B,cAAc,mBAAO,CAAC,sDAAS;;AAE/B,kBAAkB,mBAAO,CAAC,8DAAa;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,gCAAgC;AAChC;AACA;AACA,WAAW,cAAc;AACzB,WAAW,SAAS;AACpB,YAAY,WAAW;AACvB;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;;;AAGA;AACA;AACA;AACA,EAAE,IAAI;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA,WAAW,QAAQ;AACnB,WAAW,eAAe;AAC1B,YAAY;AACZ;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D,iDAAiD;AACjD;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,YAAY,SAAS;AACrB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;;;AAGA;AACA;AACA,0BAA0B;AAC1B;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,QAAQ,KAAK,aAAa,GAAG,OAAO;;AAEtD;AACA,oBAAoB,OAAO;AAC3B;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,YAAY,QAAQ;AACpB;AACA;;;AAGA,uCAAuC;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;;AAGA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;;AAGA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AChYa;;AAEb,cAAc,mBAAO,CAAC,sDAAS;;AAE/B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA,EAAE,EAAE,mBAAO,CAAC,8DAAa;;AAEzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;ACvba;;AAEb,aAAa,mBAAO,CAAC,kBAAM;;AAE3B;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE,EAAE,mBAAO,CAAC,8DAAa;;AAEzB,gBAAgB;;AAEhB,qBAAqB;;AAErB,mBAAmB;;AAEnB,mBAAmB;;AAEnB,sBAAsB;;AAEtB,yBAAyB;AACzB;AACA;AACA,GAAG;AACH;;AAEA,2BAA2B;AAC3B;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA,YAAY,oBAAoB,IAAI,iBAAiB;AACrD;;AAEA,oBAAoB,qBAAqB;AACzC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAkB,qBAAqB,cAAc;AACrD;AACA;AACA,kBAAkB,QAAQ,KAAK,MAAM,GAAG,OAAO;;AAE/C;AACA,uBAAuB,OAAO;AAC9B;;AAEA;AACA;;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;ACLY;;AAEb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;AC/BA;AACA;;AAEA,uBAAuB,mBAAO,CAAC,gEAAiB;;AAEhD;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC;AACpC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,IAAI;AACJ;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACa;;AAEb,iBAAiB,mBAAO,CAAC,oDAAW;;AAEpC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,OAAO;AACxB;;AAEA;AACA;AACA;;AAEA,iBAAiB,OAAO;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,aAAa;AACpC,IAAI;AACJ,yBAAyB,aAAa;AACtC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY;AACZ;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AA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","sources":["webpack://mb-app/./node_modules/@nodelib/fs.scandir/out/adapters/fs.js","webpack://mb-app/./node_modules/@nodelib/fs.scandir/out/constants.js","webpack://mb-app/./node_modules/@nodelib/fs.scandir/out/index.js","webpack://mb-app/./node_modules/@nodelib/fs.scandir/out/providers/async.js","webpack://mb-app/./node_modules/@nodelib/fs.scandir/out/providers/common.js","webpack://mb-app/./node_modules/@nodelib/fs.scandir/out/providers/sync.js","webpack://mb-app/./node_modules/@nodelib/fs.scandir/out/settings.js","webpack://mb-app/./node_modules/@nodelib/fs.scandir/out/utils/fs.js","webpack://mb-app/./node_modules/@nodelib/fs.scandir/out/utils/index.js","webpack://mb-app/./node_modules/@nodelib/fs.stat/out/adapters/fs.js","webpack://mb-app/./node_modules/@nodelib/fs.stat/out/index.js","webpack://mb-app/./node_modules/@nodelib/fs.stat/out/providers/async.js","webpack://mb-app/./node_modules/@nodelib/fs.stat/out/providers/sync.js","webpack://mb-app/./node_modules/@nodelib/fs.stat/out/settings.js","webpack://mb-app/./node_modules/@nodelib/fs.walk/out/index.js","webpack://mb-app/./node_modules/@nodelib/fs.walk/out/providers/async.js","webpack://mb-app/./node_modules/@nodelib/fs.walk/out/providers/stream.js","webpack://mb-app/./node_modules/@nodelib/fs.walk/out/providers/sync.js","webpack://mb-app/./node_modules/@nodelib/fs.walk/out/readers/async.js","webpack://mb-app/./node_modules/@nodelib/fs.walk/out/readers/common.js","webpack://mb-app/./node_modules/@nodelib/fs.walk/out/readers/reader.js","webpack://mb-app/./node_modules/@nodelib/fs.walk/out/readers/sync.js","webpack://mb-app/./node_modules/@nodelib/fs.walk/out/settings.js","webpack://mb-app/./node_modules/braces/index.js","webpack://mb-app/./node_modules/braces/lib/compile.js","webpack://mb-app/./node_modules/braces/lib/constants.js","webpack://mb-app/./node_modules/braces/lib/expand.js","webpack://mb-app/./node_modules/braces/lib/parse.js","webpack://mb-app/./node_modules/braces/lib/stringify.js","webpack://mb-app/./node_modules/braces/lib/utils.js","webpack://mb-app/./node_modules/electron-squirrel-startup/index.js","webpack://mb-app/./node_modules/electron-squirrel-startup/node_modules/debug/src/browser.js","webpack://mb-app/./node_modules/electron-squirrel-startup/node_modules/debug/src/debug.js","webpack://mb-app/./node_modules/electron-squirrel-startup/node_modules/debug/src/index.js","webpack://mb-app/./node_modules/electron-squirrel-startup/node_modules/debug/src/node.js","webpack://mb-app/./node_modules/electron-squirrel-startup/node_modules/ms/index.js","webpack://mb-app/./node_modules/fast-glob/out/index.js","webpack://mb-app/./node_modules/fast-glob/out/managers/patterns.js","webpack://mb-app/./node_modules/fast-glob/out/managers/tasks.js","webpack://mb-app/./node_modules/fast-glob/out/providers/async.js","webpack://mb-app/./node_modules/fast-glob/out/providers/filters/deep.js","webpack://mb-app/./node_modules/fast-glob/out/providers/filters/entry.js","webpack://mb-app/./node_modules/fast-glob/out/providers/filters/error.js","webpack://mb-app/./node_modules/fast-glob/out/providers/matchers/matcher.js","webpack://mb-app/./node_modules/fast-glob/out/providers/matchers/partial.js","webpack://mb-app/./node_modules/fast-glob/out/providers/provider.js","webpack://mb-app/./node_modules/fast-glob/out/providers/stream.js","webpack://mb-app/./node_modules/fast-glob/out/providers/sync.js","webpack://mb-app/./node_modules/fast-glob/out/providers/transformers/entry.js","webpack://mb-app/./node_modules/fast-glob/out/readers/reader.js","webpack://mb-app/./node_modules/fast-glob/out/readers/stream.js","webpack://mb-app/./node_modules/fast-glob/out/readers/sync.js","webpack://mb-app/./node_modules/fast-glob/out/settings.js","webpack://mb-app/./node_modules/fast-glob/out/utils/array.js","webpack://mb-app/./node_modules/fast-glob/out/utils/errno.js","webpack://mb-app/./node_modules/fast-glob/out/utils/fs.js","webpack://mb-app/./node_modules/fast-glob/out/utils/index.js","webpack://mb-app/./node_modules/fast-glob/out/utils/path.js","webpack://mb-app/./node_modules/fast-glob/out/utils/pattern.js","webpack://mb-app/./node_modules/fast-glob/out/utils/stream.js","webpack://mb-app/./node_modules/fast-glob/out/utils/string.js","webpack://mb-app/./node_modules/fastq/queue.js","webpack://mb-app/./node_modules/fill-range/index.js","webpack://mb-app/./node_modules/glob-parent/index.js","webpack://mb-app/./node_modules/is-extglob/index.js","webpack://mb-app/./node_modules/is-glob/index.js","webpack://mb-app/./node_modules/is-number/index.js","webpack://mb-app/./node_modules/merge2/index.js","webpack://mb-app/./node_modules/micromatch/index.js","webpack://mb-app/./node_modules/picomatch/index.js","webpack://mb-app/./node_modules/picomatch/lib/constants.js","webpack://mb-app/./node_modules/picomatch/lib/parse.js","webpack://mb-app/./node_modules/picomatch/lib/picomatch.js","webpack://mb-app/./node_modules/picomatch/lib/scan.js","webpack://mb-app/./node_modules/picomatch/lib/utils.js","webpack://mb-app/./node_modules/queue-microtask/index.js","webpack://mb-app/./node_modules/reusify/reusify.js","webpack://mb-app/./node_modules/run-parallel/index.js","webpack://mb-app/./node_modules/to-regex-range/index.js","webpack://mb-app/./utils/index.ts","webpack://mb-app/external node-commonjs \"child_process\"","webpack://mb-app/external node-commonjs \"electron\"","webpack://mb-app/external node-commonjs \"events\"","webpack://mb-app/external node-commonjs \"fs\"","webpack://mb-app/external node-commonjs \"net\"","webpack://mb-app/external node-commonjs \"os\"","webpack://mb-app/external node-commonjs \"path\"","webpack://mb-app/external node-commonjs \"stream\"","webpack://mb-app/external node-commonjs \"tty\"","webpack://mb-app/external node-commonjs \"util\"","webpack://mb-app/webpack/bootstrap","webpack://mb-app/./dev/main.ts"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;\n\nconst fs = require(\"fs\");\n\nexports.FILE_SYSTEM_ADAPTER = {\n  lstat: fs.lstat,\n  stat: fs.stat,\n  lstatSync: fs.lstatSync,\n  statSync: fs.statSync,\n  readdir: fs.readdir,\n  readdirSync: fs.readdirSync\n};\n\nfunction createFileSystemAdapter(fsMethods) {\n  if (fsMethods === undefined) {\n    return exports.FILE_SYSTEM_ADAPTER;\n  }\n\n  return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);\n}\n\nexports.createFileSystemAdapter = createFileSystemAdapter;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;\nconst NODE_PROCESS_VERSION_PARTS = process.versions.node.split('.');\n\nif (NODE_PROCESS_VERSION_PARTS[0] === undefined || NODE_PROCESS_VERSION_PARTS[1] === undefined) {\n  throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);\n}\n\nconst MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);\nconst MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);\nconst SUPPORTED_MAJOR_VERSION = 10;\nconst SUPPORTED_MINOR_VERSION = 10;\nconst IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;\nconst IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;\n/**\n * IS `true` for Node.js 10.10 and greater.\n */\n\nexports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Settings = exports.scandirSync = exports.scandir = void 0;\n\nconst async = require(\"./providers/async\");\n\nconst sync = require(\"./providers/sync\");\n\nconst settings_1 = require(\"./settings\");\n\nexports.Settings = settings_1.default;\n\nfunction scandir(path, optionsOrSettingsOrCallback, callback) {\n  if (typeof optionsOrSettingsOrCallback === 'function') {\n    async.read(path, getSettings(), optionsOrSettingsOrCallback);\n    return;\n  }\n\n  async.read(path, getSettings(optionsOrSettingsOrCallback), callback);\n}\n\nexports.scandir = scandir;\n\nfunction scandirSync(path, optionsOrSettings) {\n  const settings = getSettings(optionsOrSettings);\n  return sync.read(path, settings);\n}\n\nexports.scandirSync = scandirSync;\n\nfunction getSettings(settingsOrOptions = {}) {\n  if (settingsOrOptions instanceof settings_1.default) {\n    return settingsOrOptions;\n  }\n\n  return new settings_1.default(settingsOrOptions);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\n\nconst fsStat = require(\"@nodelib/fs.stat\");\n\nconst rpl = require(\"run-parallel\");\n\nconst constants_1 = require(\"../constants\");\n\nconst utils = require(\"../utils\");\n\nconst common = require(\"./common\");\n\nfunction read(directory, settings, callback) {\n  if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n    readdirWithFileTypes(directory, settings, callback);\n    return;\n  }\n\n  readdir(directory, settings, callback);\n}\n\nexports.read = read;\n\nfunction readdirWithFileTypes(directory, settings, callback) {\n  settings.fs.readdir(directory, {\n    withFileTypes: true\n  }, (readdirError, dirents) => {\n    if (readdirError !== null) {\n      callFailureCallback(callback, readdirError);\n      return;\n    }\n\n    const entries = dirents.map(dirent => ({\n      dirent,\n      name: dirent.name,\n      path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\n    }));\n\n    if (!settings.followSymbolicLinks) {\n      callSuccessCallback(callback, entries);\n      return;\n    }\n\n    const tasks = entries.map(entry => makeRplTaskEntry(entry, settings));\n    rpl(tasks, (rplError, rplEntries) => {\n      if (rplError !== null) {\n        callFailureCallback(callback, rplError);\n        return;\n      }\n\n      callSuccessCallback(callback, rplEntries);\n    });\n  });\n}\n\nexports.readdirWithFileTypes = readdirWithFileTypes;\n\nfunction makeRplTaskEntry(entry, settings) {\n  return done => {\n    if (!entry.dirent.isSymbolicLink()) {\n      done(null, entry);\n      return;\n    }\n\n    settings.fs.stat(entry.path, (statError, stats) => {\n      if (statError !== null) {\n        if (settings.throwErrorOnBrokenSymbolicLink) {\n          done(statError);\n          return;\n        }\n\n        done(null, entry);\n        return;\n      }\n\n      entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n      done(null, entry);\n    });\n  };\n}\n\nfunction readdir(directory, settings, callback) {\n  settings.fs.readdir(directory, (readdirError, names) => {\n    if (readdirError !== null) {\n      callFailureCallback(callback, readdirError);\n      return;\n    }\n\n    const tasks = names.map(name => {\n      const path = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\n      return done => {\n        fsStat.stat(path, settings.fsStatSettings, (error, stats) => {\n          if (error !== null) {\n            done(error);\n            return;\n          }\n\n          const entry = {\n            name,\n            path,\n            dirent: utils.fs.createDirentFromStats(name, stats)\n          };\n\n          if (settings.stats) {\n            entry.stats = stats;\n          }\n\n          done(null, entry);\n        });\n      };\n    });\n    rpl(tasks, (rplError, entries) => {\n      if (rplError !== null) {\n        callFailureCallback(callback, rplError);\n        return;\n      }\n\n      callSuccessCallback(callback, entries);\n    });\n  });\n}\n\nexports.readdir = readdir;\n\nfunction callFailureCallback(callback, error) {\n  callback(error);\n}\n\nfunction callSuccessCallback(callback, result) {\n  callback(null, result);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.joinPathSegments = void 0;\n\nfunction joinPathSegments(a, b, separator) {\n  /**\n   * The correct handling of cases when the first segment is a root (`/`, `C:/`) or UNC path (`//?/C:/`).\n   */\n  if (a.endsWith(separator)) {\n    return a + b;\n  }\n\n  return a + separator + b;\n}\n\nexports.joinPathSegments = joinPathSegments;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\n\nconst fsStat = require(\"@nodelib/fs.stat\");\n\nconst constants_1 = require(\"../constants\");\n\nconst utils = require(\"../utils\");\n\nconst common = require(\"./common\");\n\nfunction read(directory, settings) {\n  if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n    return readdirWithFileTypes(directory, settings);\n  }\n\n  return readdir(directory, settings);\n}\n\nexports.read = read;\n\nfunction readdirWithFileTypes(directory, settings) {\n  const dirents = settings.fs.readdirSync(directory, {\n    withFileTypes: true\n  });\n  return dirents.map(dirent => {\n    const entry = {\n      dirent,\n      name: dirent.name,\n      path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\n    };\n\n    if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {\n      try {\n        const stats = settings.fs.statSync(entry.path);\n        entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n      } catch (error) {\n        if (settings.throwErrorOnBrokenSymbolicLink) {\n          throw error;\n        }\n      }\n    }\n\n    return entry;\n  });\n}\n\nexports.readdirWithFileTypes = readdirWithFileTypes;\n\nfunction readdir(directory, settings) {\n  const names = settings.fs.readdirSync(directory);\n  return names.map(name => {\n    const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\n    const stats = fsStat.statSync(entryPath, settings.fsStatSettings);\n    const entry = {\n      name,\n      path: entryPath,\n      dirent: utils.fs.createDirentFromStats(name, stats)\n    };\n\n    if (settings.stats) {\n      entry.stats = stats;\n    }\n\n    return entry;\n  });\n}\n\nexports.readdir = readdir;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst path = require(\"path\");\n\nconst fsStat = require(\"@nodelib/fs.stat\");\n\nconst fs = require(\"./adapters/fs\");\n\nclass Settings {\n  constructor(_options = {}) {\n    this._options = _options;\n    this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);\n    this.fs = fs.createFileSystemAdapter(this._options.fs);\n    this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);\n    this.stats = this._getValue(this._options.stats, false);\n    this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);\n    this.fsStatSettings = new fsStat.Settings({\n      followSymbolicLink: this.followSymbolicLinks,\n      fs: this.fs,\n      throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink\n    });\n  }\n\n  _getValue(option, value) {\n    return option !== null && option !== void 0 ? option : value;\n  }\n\n}\n\nexports.default = Settings;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDirentFromStats = void 0;\n\nclass DirentFromStats {\n  constructor(name, stats) {\n    this.name = name;\n    this.isBlockDevice = stats.isBlockDevice.bind(stats);\n    this.isCharacterDevice = stats.isCharacterDevice.bind(stats);\n    this.isDirectory = stats.isDirectory.bind(stats);\n    this.isFIFO = stats.isFIFO.bind(stats);\n    this.isFile = stats.isFile.bind(stats);\n    this.isSocket = stats.isSocket.bind(stats);\n    this.isSymbolicLink = stats.isSymbolicLink.bind(stats);\n  }\n\n}\n\nfunction createDirentFromStats(name, stats) {\n  return new DirentFromStats(name, stats);\n}\n\nexports.createDirentFromStats = createDirentFromStats;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fs = void 0;\n\nconst fs = require(\"./fs\");\n\nexports.fs = fs;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;\n\nconst fs = require(\"fs\");\n\nexports.FILE_SYSTEM_ADAPTER = {\n  lstat: fs.lstat,\n  stat: fs.stat,\n  lstatSync: fs.lstatSync,\n  statSync: fs.statSync\n};\n\nfunction createFileSystemAdapter(fsMethods) {\n  if (fsMethods === undefined) {\n    return exports.FILE_SYSTEM_ADAPTER;\n  }\n\n  return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);\n}\n\nexports.createFileSystemAdapter = createFileSystemAdapter;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.statSync = exports.stat = exports.Settings = void 0;\n\nconst async = require(\"./providers/async\");\n\nconst sync = require(\"./providers/sync\");\n\nconst settings_1 = require(\"./settings\");\n\nexports.Settings = settings_1.default;\n\nfunction stat(path, optionsOrSettingsOrCallback, callback) {\n  if (typeof optionsOrSettingsOrCallback === 'function') {\n    async.read(path, getSettings(), optionsOrSettingsOrCallback);\n    return;\n  }\n\n  async.read(path, getSettings(optionsOrSettingsOrCallback), callback);\n}\n\nexports.stat = stat;\n\nfunction statSync(path, optionsOrSettings) {\n  const settings = getSettings(optionsOrSettings);\n  return sync.read(path, settings);\n}\n\nexports.statSync = statSync;\n\nfunction getSettings(settingsOrOptions = {}) {\n  if (settingsOrOptions instanceof settings_1.default) {\n    return settingsOrOptions;\n  }\n\n  return new settings_1.default(settingsOrOptions);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.read = void 0;\n\nfunction read(path, settings, callback) {\n  settings.fs.lstat(path, (lstatError, lstat) => {\n    if (lstatError !== null) {\n      callFailureCallback(callback, lstatError);\n      return;\n    }\n\n    if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {\n      callSuccessCallback(callback, lstat);\n      return;\n    }\n\n    settings.fs.stat(path, (statError, stat) => {\n      if (statError !== null) {\n        if (settings.throwErrorOnBrokenSymbolicLink) {\n          callFailureCallback(callback, statError);\n          return;\n        }\n\n        callSuccessCallback(callback, lstat);\n        return;\n      }\n\n      if (settings.markSymbolicLink) {\n        stat.isSymbolicLink = () => true;\n      }\n\n      callSuccessCallback(callback, stat);\n    });\n  });\n}\n\nexports.read = read;\n\nfunction callFailureCallback(callback, error) {\n  callback(error);\n}\n\nfunction callSuccessCallback(callback, result) {\n  callback(null, result);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.read = void 0;\n\nfunction read(path, settings) {\n  const lstat = settings.fs.lstatSync(path);\n\n  if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {\n    return lstat;\n  }\n\n  try {\n    const stat = settings.fs.statSync(path);\n\n    if (settings.markSymbolicLink) {\n      stat.isSymbolicLink = () => true;\n    }\n\n    return stat;\n  } catch (error) {\n    if (!settings.throwErrorOnBrokenSymbolicLink) {\n      return lstat;\n    }\n\n    throw error;\n  }\n}\n\nexports.read = read;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = require(\"./adapters/fs\");\n\nclass Settings {\n  constructor(_options = {}) {\n    this._options = _options;\n    this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);\n    this.fs = fs.createFileSystemAdapter(this._options.fs);\n    this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);\n    this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);\n  }\n\n  _getValue(option, value) {\n    return option !== null && option !== void 0 ? option : value;\n  }\n\n}\n\nexports.default = Settings;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Settings = exports.walkStream = exports.walkSync = exports.walk = void 0;\n\nconst async_1 = require(\"./providers/async\");\n\nconst stream_1 = require(\"./providers/stream\");\n\nconst sync_1 = require(\"./providers/sync\");\n\nconst settings_1 = require(\"./settings\");\n\nexports.Settings = settings_1.default;\n\nfunction walk(directory, optionsOrSettingsOrCallback, callback) {\n  if (typeof optionsOrSettingsOrCallback === 'function') {\n    new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);\n    return;\n  }\n\n  new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);\n}\n\nexports.walk = walk;\n\nfunction walkSync(directory, optionsOrSettings) {\n  const settings = getSettings(optionsOrSettings);\n  const provider = new sync_1.default(directory, settings);\n  return provider.read();\n}\n\nexports.walkSync = walkSync;\n\nfunction walkStream(directory, optionsOrSettings) {\n  const settings = getSettings(optionsOrSettings);\n  const provider = new stream_1.default(directory, settings);\n  return provider.read();\n}\n\nexports.walkStream = walkStream;\n\nfunction getSettings(settingsOrOptions = {}) {\n  if (settingsOrOptions instanceof settings_1.default) {\n    return settingsOrOptions;\n  }\n\n  return new settings_1.default(settingsOrOptions);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst async_1 = require(\"../readers/async\");\n\nclass AsyncProvider {\n  constructor(_root, _settings) {\n    this._root = _root;\n    this._settings = _settings;\n    this._reader = new async_1.default(this._root, this._settings);\n    this._storage = [];\n  }\n\n  read(callback) {\n    this._reader.onError(error => {\n      callFailureCallback(callback, error);\n    });\n\n    this._reader.onEntry(entry => {\n      this._storage.push(entry);\n    });\n\n    this._reader.onEnd(() => {\n      callSuccessCallback(callback, this._storage);\n    });\n\n    this._reader.read();\n  }\n\n}\n\nexports.default = AsyncProvider;\n\nfunction callFailureCallback(callback, error) {\n  callback(error);\n}\n\nfunction callSuccessCallback(callback, entries) {\n  callback(null, entries);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst stream_1 = require(\"stream\");\n\nconst async_1 = require(\"../readers/async\");\n\nclass StreamProvider {\n  constructor(_root, _settings) {\n    this._root = _root;\n    this._settings = _settings;\n    this._reader = new async_1.default(this._root, this._settings);\n    this._stream = new stream_1.Readable({\n      objectMode: true,\n      read: () => {},\n      destroy: () => {\n        if (!this._reader.isDestroyed) {\n          this._reader.destroy();\n        }\n      }\n    });\n  }\n\n  read() {\n    this._reader.onError(error => {\n      this._stream.emit('error', error);\n    });\n\n    this._reader.onEntry(entry => {\n      this._stream.push(entry);\n    });\n\n    this._reader.onEnd(() => {\n      this._stream.push(null);\n    });\n\n    this._reader.read();\n\n    return this._stream;\n  }\n\n}\n\nexports.default = StreamProvider;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst sync_1 = require(\"../readers/sync\");\n\nclass SyncProvider {\n  constructor(_root, _settings) {\n    this._root = _root;\n    this._settings = _settings;\n    this._reader = new sync_1.default(this._root, this._settings);\n  }\n\n  read() {\n    return this._reader.read();\n  }\n\n}\n\nexports.default = SyncProvider;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst events_1 = require(\"events\");\n\nconst fsScandir = require(\"@nodelib/fs.scandir\");\n\nconst fastq = require(\"fastq\");\n\nconst common = require(\"./common\");\n\nconst reader_1 = require(\"./reader\");\n\nclass AsyncReader extends reader_1.default {\n  constructor(_root, _settings) {\n    super(_root, _settings);\n    this._settings = _settings;\n    this._scandir = fsScandir.scandir;\n    this._emitter = new events_1.EventEmitter();\n    this._queue = fastq(this._worker.bind(this), this._settings.concurrency);\n    this._isFatalError = false;\n    this._isDestroyed = false;\n\n    this._queue.drain = () => {\n      if (!this._isFatalError) {\n        this._emitter.emit('end');\n      }\n    };\n  }\n\n  read() {\n    this._isFatalError = false;\n    this._isDestroyed = false;\n    setImmediate(() => {\n      this._pushToQueue(this._root, this._settings.basePath);\n    });\n    return this._emitter;\n  }\n\n  get isDestroyed() {\n    return this._isDestroyed;\n  }\n\n  destroy() {\n    if (this._isDestroyed) {\n      throw new Error('The reader is already destroyed');\n    }\n\n    this._isDestroyed = true;\n\n    this._queue.killAndDrain();\n  }\n\n  onEntry(callback) {\n    this._emitter.on('entry', callback);\n  }\n\n  onError(callback) {\n    this._emitter.once('error', callback);\n  }\n\n  onEnd(callback) {\n    this._emitter.once('end', callback);\n  }\n\n  _pushToQueue(directory, base) {\n    const queueItem = {\n      directory,\n      base\n    };\n\n    this._queue.push(queueItem, error => {\n      if (error !== null) {\n        this._handleError(error);\n      }\n    });\n  }\n\n  _worker(item, done) {\n    this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {\n      if (error !== null) {\n        done(error, undefined);\n        return;\n      }\n\n      for (const entry of entries) {\n        this._handleEntry(entry, item.base);\n      }\n\n      done(null, undefined);\n    });\n  }\n\n  _handleError(error) {\n    if (this._isDestroyed || !common.isFatalError(this._settings, error)) {\n      return;\n    }\n\n    this._isFatalError = true;\n    this._isDestroyed = true;\n\n    this._emitter.emit('error', error);\n  }\n\n  _handleEntry(entry, base) {\n    if (this._isDestroyed || this._isFatalError) {\n      return;\n    }\n\n    const fullpath = entry.path;\n\n    if (base !== undefined) {\n      entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);\n    }\n\n    if (common.isAppliedFilter(this._settings.entryFilter, entry)) {\n      this._emitEntry(entry);\n    }\n\n    if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {\n      this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);\n    }\n  }\n\n  _emitEntry(entry) {\n    this._emitter.emit('entry', entry);\n  }\n\n}\n\nexports.default = AsyncReader;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.joinPathSegments = exports.replacePathSegmentSeparator = exports.isAppliedFilter = exports.isFatalError = void 0;\n\nfunction isFatalError(settings, error) {\n  if (settings.errorFilter === null) {\n    return true;\n  }\n\n  return !settings.errorFilter(error);\n}\n\nexports.isFatalError = isFatalError;\n\nfunction isAppliedFilter(filter, value) {\n  return filter === null || filter(value);\n}\n\nexports.isAppliedFilter = isAppliedFilter;\n\nfunction replacePathSegmentSeparator(filepath, separator) {\n  return filepath.split(/[/\\\\]/).join(separator);\n}\n\nexports.replacePathSegmentSeparator = replacePathSegmentSeparator;\n\nfunction joinPathSegments(a, b, separator) {\n  if (a === '') {\n    return b;\n  }\n  /**\n   * The correct handling of cases when the first segment is a root (`/`, `C:/`) or UNC path (`//?/C:/`).\n   */\n\n\n  if (a.endsWith(separator)) {\n    return a + b;\n  }\n\n  return a + separator + b;\n}\n\nexports.joinPathSegments = joinPathSegments;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst common = require(\"./common\");\n\nclass Reader {\n  constructor(_root, _settings) {\n    this._root = _root;\n    this._settings = _settings;\n    this._root = common.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);\n  }\n\n}\n\nexports.default = Reader;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fsScandir = require(\"@nodelib/fs.scandir\");\n\nconst common = require(\"./common\");\n\nconst reader_1 = require(\"./reader\");\n\nclass SyncReader extends reader_1.default {\n  constructor() {\n    super(...arguments);\n    this._scandir = fsScandir.scandirSync;\n    this._storage = [];\n    this._queue = new Set();\n  }\n\n  read() {\n    this._pushToQueue(this._root, this._settings.basePath);\n\n    this._handleQueue();\n\n    return this._storage;\n  }\n\n  _pushToQueue(directory, base) {\n    this._queue.add({\n      directory,\n      base\n    });\n  }\n\n  _handleQueue() {\n    for (const item of this._queue.values()) {\n      this._handleDirectory(item.directory, item.base);\n    }\n  }\n\n  _handleDirectory(directory, base) {\n    try {\n      const entries = this._scandir(directory, this._settings.fsScandirSettings);\n\n      for (const entry of entries) {\n        this._handleEntry(entry, base);\n      }\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n\n  _handleError(error) {\n    if (!common.isFatalError(this._settings, error)) {\n      return;\n    }\n\n    throw error;\n  }\n\n  _handleEntry(entry, base) {\n    const fullpath = entry.path;\n\n    if (base !== undefined) {\n      entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);\n    }\n\n    if (common.isAppliedFilter(this._settings.entryFilter, entry)) {\n      this._pushToStorage(entry);\n    }\n\n    if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {\n      this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);\n    }\n  }\n\n  _pushToStorage(entry) {\n    this._storage.push(entry);\n  }\n\n}\n\nexports.default = SyncReader;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst path = require(\"path\");\n\nconst fsScandir = require(\"@nodelib/fs.scandir\");\n\nclass Settings {\n  constructor(_options = {}) {\n    this._options = _options;\n    this.basePath = this._getValue(this._options.basePath, undefined);\n    this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);\n    this.deepFilter = this._getValue(this._options.deepFilter, null);\n    this.entryFilter = this._getValue(this._options.entryFilter, null);\n    this.errorFilter = this._getValue(this._options.errorFilter, null);\n    this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);\n    this.fsScandirSettings = new fsScandir.Settings({\n      followSymbolicLinks: this._options.followSymbolicLinks,\n      fs: this._options.fs,\n      pathSegmentSeparator: this._options.pathSegmentSeparator,\n      stats: this._options.stats,\n      throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink\n    });\n  }\n\n  _getValue(option, value) {\n    return option !== null && option !== void 0 ? option : value;\n  }\n\n}\n\nexports.default = Settings;","'use strict';\n\nconst stringify = require('./lib/stringify');\n\nconst compile = require('./lib/compile');\n\nconst expand = require('./lib/expand');\n\nconst parse = require('./lib/parse');\n/**\n * Expand the given pattern or create a regex-compatible string.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']\n * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {String}\n * @api public\n */\n\n\nconst braces = (input, options = {}) => {\n  let output = [];\n\n  if (Array.isArray(input)) {\n    for (let pattern of input) {\n      let result = braces.create(pattern, options);\n\n      if (Array.isArray(result)) {\n        output.push(...result);\n      } else {\n        output.push(result);\n      }\n    }\n  } else {\n    output = [].concat(braces.create(input, options));\n  }\n\n  if (options && options.expand === true && options.nodupes === true) {\n    output = [...new Set(output)];\n  }\n\n  return output;\n};\n/**\n * Parse the given `str` with the given `options`.\n *\n * ```js\n * // braces.parse(pattern, [, options]);\n * const ast = braces.parse('a/{b,c}/d');\n * console.log(ast);\n * ```\n * @param {String} pattern Brace pattern to parse\n * @param {Object} options\n * @return {Object} Returns an AST\n * @api public\n */\n\n\nbraces.parse = (input, options = {}) => parse(input, options);\n/**\n * Creates a braces string from an AST, or an AST node.\n *\n * ```js\n * const braces = require('braces');\n * let ast = braces.parse('foo/{a,b}/bar');\n * console.log(stringify(ast.nodes[2])); //=> '{a,b}'\n * ```\n * @param {String} `input` Brace pattern or AST.\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\n\nbraces.stringify = (input, options = {}) => {\n  if (typeof input === 'string') {\n    return stringify(braces.parse(input, options), options);\n  }\n\n  return stringify(input, options);\n};\n/**\n * Compiles a brace pattern into a regex-compatible, optimized string.\n * This method is called by the main [braces](#braces) function by default.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.compile('a/{b,c}/d'));\n * //=> ['a/(b|c)/d']\n * ```\n * @param {String} `input` Brace pattern or AST.\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\n\nbraces.compile = (input, options = {}) => {\n  if (typeof input === 'string') {\n    input = braces.parse(input, options);\n  }\n\n  return compile(input, options);\n};\n/**\n * Expands a brace pattern into an array. This method is called by the\n * main [braces](#braces) function when `options.expand` is true. Before\n * using this method it's recommended that you read the [performance notes](#performance))\n * and advantages of using [.compile](#compile) instead.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.expand('a/{b,c}/d'));\n * //=> ['a/b/d', 'a/c/d'];\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\n\nbraces.expand = (input, options = {}) => {\n  if (typeof input === 'string') {\n    input = braces.parse(input, options);\n  }\n\n  let result = expand(input, options); // filter out empty strings if specified\n\n  if (options.noempty === true) {\n    result = result.filter(Boolean);\n  } // filter out duplicates if specified\n\n\n  if (options.nodupes === true) {\n    result = [...new Set(result)];\n  }\n\n  return result;\n};\n/**\n * Processes a brace pattern and returns either an expanded array\n * (if `options.expand` is true), a highly optimized regex-compatible string.\n * This method is called by the main [braces](#braces) function.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))\n * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\n\nbraces.create = (input, options = {}) => {\n  if (input === '' || input.length < 3) {\n    return [input];\n  }\n\n  return options.expand !== true ? braces.compile(input, options) : braces.expand(input, options);\n};\n/**\n * Expose \"braces\"\n */\n\n\nmodule.exports = braces;","'use strict';\n\nconst fill = require('fill-range');\n\nconst utils = require('./utils');\n\nconst compile = (ast, options = {}) => {\n  let walk = (node, parent = {}) => {\n    let invalidBlock = utils.isInvalidBrace(parent);\n    let invalidNode = node.invalid === true && options.escapeInvalid === true;\n    let invalid = invalidBlock === true || invalidNode === true;\n    let prefix = options.escapeInvalid === true ? '\\\\' : '';\n    let output = '';\n\n    if (node.isOpen === true) {\n      return prefix + node.value;\n    }\n\n    if (node.isClose === true) {\n      return prefix + node.value;\n    }\n\n    if (node.type === 'open') {\n      return invalid ? prefix + node.value : '(';\n    }\n\n    if (node.type === 'close') {\n      return invalid ? prefix + node.value : ')';\n    }\n\n    if (node.type === 'comma') {\n      return node.prev.type === 'comma' ? '' : invalid ? node.value : '|';\n    }\n\n    if (node.value) {\n      return node.value;\n    }\n\n    if (node.nodes && node.ranges > 0) {\n      let args = utils.reduce(node.nodes);\n      let range = fill(...args, { ...options,\n        wrap: false,\n        toRegex: true\n      });\n\n      if (range.length !== 0) {\n        return args.length > 1 && range.length > 1 ? `(${range})` : range;\n      }\n    }\n\n    if (node.nodes) {\n      for (let child of node.nodes) {\n        output += walk(child, node);\n      }\n    }\n\n    return output;\n  };\n\n  return walk(ast);\n};\n\nmodule.exports = compile;","'use strict';\n\nmodule.exports = {\n  MAX_LENGTH: 1024 * 64,\n  // Digits\n  CHAR_0: '0',\n\n  /* 0 */\n  CHAR_9: '9',\n\n  /* 9 */\n  // Alphabet chars.\n  CHAR_UPPERCASE_A: 'A',\n\n  /* A */\n  CHAR_LOWERCASE_A: 'a',\n\n  /* a */\n  CHAR_UPPERCASE_Z: 'Z',\n\n  /* Z */\n  CHAR_LOWERCASE_Z: 'z',\n\n  /* z */\n  CHAR_LEFT_PARENTHESES: '(',\n\n  /* ( */\n  CHAR_RIGHT_PARENTHESES: ')',\n\n  /* ) */\n  CHAR_ASTERISK: '*',\n\n  /* * */\n  // Non-alphabetic chars.\n  CHAR_AMPERSAND: '&',\n\n  /* & */\n  CHAR_AT: '@',\n\n  /* @ */\n  CHAR_BACKSLASH: '\\\\',\n\n  /* \\ */\n  CHAR_BACKTICK: '`',\n\n  /* ` */\n  CHAR_CARRIAGE_RETURN: '\\r',\n\n  /* \\r */\n  CHAR_CIRCUMFLEX_ACCENT: '^',\n\n  /* ^ */\n  CHAR_COLON: ':',\n\n  /* : */\n  CHAR_COMMA: ',',\n\n  /* , */\n  CHAR_DOLLAR: '$',\n\n  /* . */\n  CHAR_DOT: '.',\n\n  /* . */\n  CHAR_DOUBLE_QUOTE: '\"',\n\n  /* \" */\n  CHAR_EQUAL: '=',\n\n  /* = */\n  CHAR_EXCLAMATION_MARK: '!',\n\n  /* ! */\n  CHAR_FORM_FEED: '\\f',\n\n  /* \\f */\n  CHAR_FORWARD_SLASH: '/',\n\n  /* / */\n  CHAR_HASH: '#',\n\n  /* # */\n  CHAR_HYPHEN_MINUS: '-',\n\n  /* - */\n  CHAR_LEFT_ANGLE_BRACKET: '<',\n\n  /* < */\n  CHAR_LEFT_CURLY_BRACE: '{',\n\n  /* { */\n  CHAR_LEFT_SQUARE_BRACKET: '[',\n\n  /* [ */\n  CHAR_LINE_FEED: '\\n',\n\n  /* \\n */\n  CHAR_NO_BREAK_SPACE: '\\u00A0',\n\n  /* \\u00A0 */\n  CHAR_PERCENT: '%',\n\n  /* % */\n  CHAR_PLUS: '+',\n\n  /* + */\n  CHAR_QUESTION_MARK: '?',\n\n  /* ? */\n  CHAR_RIGHT_ANGLE_BRACKET: '>',\n\n  /* > */\n  CHAR_RIGHT_CURLY_BRACE: '}',\n\n  /* } */\n  CHAR_RIGHT_SQUARE_BRACKET: ']',\n\n  /* ] */\n  CHAR_SEMICOLON: ';',\n\n  /* ; */\n  CHAR_SINGLE_QUOTE: '\\'',\n\n  /* ' */\n  CHAR_SPACE: ' ',\n\n  /*   */\n  CHAR_TAB: '\\t',\n\n  /* \\t */\n  CHAR_UNDERSCORE: '_',\n\n  /* _ */\n  CHAR_VERTICAL_LINE: '|',\n\n  /* | */\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE: '\\uFEFF'\n  /* \\uFEFF */\n\n};","'use strict';\n\nconst fill = require('fill-range');\n\nconst stringify = require('./stringify');\n\nconst utils = require('./utils');\n\nconst append = (queue = '', stash = '', enclose = false) => {\n  let result = [];\n  queue = [].concat(queue);\n  stash = [].concat(stash);\n  if (!stash.length) return queue;\n\n  if (!queue.length) {\n    return enclose ? utils.flatten(stash).map(ele => `{${ele}}`) : stash;\n  }\n\n  for (let item of queue) {\n    if (Array.isArray(item)) {\n      for (let value of item) {\n        result.push(append(value, stash, enclose));\n      }\n    } else {\n      for (let ele of stash) {\n        if (enclose === true && typeof ele === 'string') ele = `{${ele}}`;\n        result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);\n      }\n    }\n  }\n\n  return utils.flatten(result);\n};\n\nconst expand = (ast, options = {}) => {\n  let rangeLimit = options.rangeLimit === void 0 ? 1000 : options.rangeLimit;\n\n  let walk = (node, parent = {}) => {\n    node.queue = [];\n    let p = parent;\n    let q = parent.queue;\n\n    while (p.type !== 'brace' && p.type !== 'root' && p.parent) {\n      p = p.parent;\n      q = p.queue;\n    }\n\n    if (node.invalid || node.dollar) {\n      q.push(append(q.pop(), stringify(node, options)));\n      return;\n    }\n\n    if (node.type === 'brace' && node.invalid !== true && node.nodes.length === 2) {\n      q.push(append(q.pop(), ['{}']));\n      return;\n    }\n\n    if (node.nodes && node.ranges > 0) {\n      let args = utils.reduce(node.nodes);\n\n      if (utils.exceedsLimit(...args, options.step, rangeLimit)) {\n        throw new RangeError('expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.');\n      }\n\n      let range = fill(...args, options);\n\n      if (range.length === 0) {\n        range = stringify(node, options);\n      }\n\n      q.push(append(q.pop(), range));\n      node.nodes = [];\n      return;\n    }\n\n    let enclose = utils.encloseBrace(node);\n    let queue = node.queue;\n    let block = node;\n\n    while (block.type !== 'brace' && block.type !== 'root' && block.parent) {\n      block = block.parent;\n      queue = block.queue;\n    }\n\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i];\n\n      if (child.type === 'comma' && node.type === 'brace') {\n        if (i === 1) queue.push('');\n        queue.push('');\n        continue;\n      }\n\n      if (child.type === 'close') {\n        q.push(append(q.pop(), queue, enclose));\n        continue;\n      }\n\n      if (child.value && child.type !== 'open') {\n        queue.push(append(queue.pop(), child.value));\n        continue;\n      }\n\n      if (child.nodes) {\n        walk(child, node);\n      }\n    }\n\n    return queue;\n  };\n\n  return utils.flatten(walk(ast));\n};\n\nmodule.exports = expand;","'use strict';\n\nconst stringify = require('./stringify');\n/**\n * Constants\n */\n\n\nconst {\n  MAX_LENGTH,\n  CHAR_BACKSLASH,\n\n  /* \\ */\n  CHAR_BACKTICK,\n\n  /* ` */\n  CHAR_COMMA,\n\n  /* , */\n  CHAR_DOT,\n\n  /* . */\n  CHAR_LEFT_PARENTHESES,\n\n  /* ( */\n  CHAR_RIGHT_PARENTHESES,\n\n  /* ) */\n  CHAR_LEFT_CURLY_BRACE,\n\n  /* { */\n  CHAR_RIGHT_CURLY_BRACE,\n\n  /* } */\n  CHAR_LEFT_SQUARE_BRACKET,\n\n  /* [ */\n  CHAR_RIGHT_SQUARE_BRACKET,\n\n  /* ] */\n  CHAR_DOUBLE_QUOTE,\n\n  /* \" */\n  CHAR_SINGLE_QUOTE,\n\n  /* ' */\n  CHAR_NO_BREAK_SPACE,\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE\n} = require('./constants');\n/**\n * parse\n */\n\n\nconst parse = (input, options = {}) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  let opts = options || {};\n  let max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n\n  if (input.length > max) {\n    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);\n  }\n\n  let ast = {\n    type: 'root',\n    input,\n    nodes: []\n  };\n  let stack = [ast];\n  let block = ast;\n  let prev = ast;\n  let brackets = 0;\n  let length = input.length;\n  let index = 0;\n  let depth = 0;\n  let value;\n  let memo = {};\n  /**\n   * Helpers\n   */\n\n  const advance = () => input[index++];\n\n  const push = node => {\n    if (node.type === 'text' && prev.type === 'dot') {\n      prev.type = 'text';\n    }\n\n    if (prev && prev.type === 'text' && node.type === 'text') {\n      prev.value += node.value;\n      return;\n    }\n\n    block.nodes.push(node);\n    node.parent = block;\n    node.prev = prev;\n    prev = node;\n    return node;\n  };\n\n  push({\n    type: 'bos'\n  });\n\n  while (index < length) {\n    block = stack[stack.length - 1];\n    value = advance();\n    /**\n     * Invalid chars\n     */\n\n    if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {\n      continue;\n    }\n    /**\n     * Escaped chars\n     */\n\n\n    if (value === CHAR_BACKSLASH) {\n      push({\n        type: 'text',\n        value: (options.keepEscaping ? value : '') + advance()\n      });\n      continue;\n    }\n    /**\n     * Right square bracket (literal): ']'\n     */\n\n\n    if (value === CHAR_RIGHT_SQUARE_BRACKET) {\n      push({\n        type: 'text',\n        value: '\\\\' + value\n      });\n      continue;\n    }\n    /**\n     * Left square bracket: '['\n     */\n\n\n    if (value === CHAR_LEFT_SQUARE_BRACKET) {\n      brackets++;\n      let closed = true;\n      let next;\n\n      while (index < length && (next = advance())) {\n        value += next;\n\n        if (next === CHAR_LEFT_SQUARE_BRACKET) {\n          brackets++;\n          continue;\n        }\n\n        if (next === CHAR_BACKSLASH) {\n          value += advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          brackets--;\n\n          if (brackets === 0) {\n            break;\n          }\n        }\n      }\n\n      push({\n        type: 'text',\n        value\n      });\n      continue;\n    }\n    /**\n     * Parentheses\n     */\n\n\n    if (value === CHAR_LEFT_PARENTHESES) {\n      block = push({\n        type: 'paren',\n        nodes: []\n      });\n      stack.push(block);\n      push({\n        type: 'text',\n        value\n      });\n      continue;\n    }\n\n    if (value === CHAR_RIGHT_PARENTHESES) {\n      if (block.type !== 'paren') {\n        push({\n          type: 'text',\n          value\n        });\n        continue;\n      }\n\n      block = stack.pop();\n      push({\n        type: 'text',\n        value\n      });\n      block = stack[stack.length - 1];\n      continue;\n    }\n    /**\n     * Quotes: '|\"|`\n     */\n\n\n    if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {\n      let open = value;\n      let next;\n\n      if (options.keepQuotes !== true) {\n        value = '';\n      }\n\n      while (index < length && (next = advance())) {\n        if (next === CHAR_BACKSLASH) {\n          value += next + advance();\n          continue;\n        }\n\n        if (next === open) {\n          if (options.keepQuotes === true) value += next;\n          break;\n        }\n\n        value += next;\n      }\n\n      push({\n        type: 'text',\n        value\n      });\n      continue;\n    }\n    /**\n     * Left curly brace: '{'\n     */\n\n\n    if (value === CHAR_LEFT_CURLY_BRACE) {\n      depth++;\n      let dollar = prev.value && prev.value.slice(-1) === '$' || block.dollar === true;\n      let brace = {\n        type: 'brace',\n        open: true,\n        close: false,\n        dollar,\n        depth,\n        commas: 0,\n        ranges: 0,\n        nodes: []\n      };\n      block = push(brace);\n      stack.push(block);\n      push({\n        type: 'open',\n        value\n      });\n      continue;\n    }\n    /**\n     * Right curly brace: '}'\n     */\n\n\n    if (value === CHAR_RIGHT_CURLY_BRACE) {\n      if (block.type !== 'brace') {\n        push({\n          type: 'text',\n          value\n        });\n        continue;\n      }\n\n      let type = 'close';\n      block = stack.pop();\n      block.close = true;\n      push({\n        type,\n        value\n      });\n      depth--;\n      block = stack[stack.length - 1];\n      continue;\n    }\n    /**\n     * Comma: ','\n     */\n\n\n    if (value === CHAR_COMMA && depth > 0) {\n      if (block.ranges > 0) {\n        block.ranges = 0;\n        let open = block.nodes.shift();\n        block.nodes = [open, {\n          type: 'text',\n          value: stringify(block)\n        }];\n      }\n\n      push({\n        type: 'comma',\n        value\n      });\n      block.commas++;\n      continue;\n    }\n    /**\n     * Dot: '.'\n     */\n\n\n    if (value === CHAR_DOT && depth > 0 && block.commas === 0) {\n      let siblings = block.nodes;\n\n      if (depth === 0 || siblings.length === 0) {\n        push({\n          type: 'text',\n          value\n        });\n        continue;\n      }\n\n      if (prev.type === 'dot') {\n        block.range = [];\n        prev.value += value;\n        prev.type = 'range';\n\n        if (block.nodes.length !== 3 && block.nodes.length !== 5) {\n          block.invalid = true;\n          block.ranges = 0;\n          prev.type = 'text';\n          continue;\n        }\n\n        block.ranges++;\n        block.args = [];\n        continue;\n      }\n\n      if (prev.type === 'range') {\n        siblings.pop();\n        let before = siblings[siblings.length - 1];\n        before.value += prev.value + value;\n        prev = before;\n        block.ranges--;\n        continue;\n      }\n\n      push({\n        type: 'dot',\n        value\n      });\n      continue;\n    }\n    /**\n     * Text\n     */\n\n\n    push({\n      type: 'text',\n      value\n    });\n  } // Mark imbalanced braces and brackets as invalid\n\n\n  do {\n    block = stack.pop();\n\n    if (block.type !== 'root') {\n      block.nodes.forEach(node => {\n        if (!node.nodes) {\n          if (node.type === 'open') node.isOpen = true;\n          if (node.type === 'close') node.isClose = true;\n          if (!node.nodes) node.type = 'text';\n          node.invalid = true;\n        }\n      }); // get the location of the block on parent.nodes (block's siblings)\n\n      let parent = stack[stack.length - 1];\n      let index = parent.nodes.indexOf(block); // replace the (invalid) block with it's nodes\n\n      parent.nodes.splice(index, 1, ...block.nodes);\n    }\n  } while (stack.length > 0);\n\n  push({\n    type: 'eos'\n  });\n  return ast;\n};\n\nmodule.exports = parse;","'use strict';\n\nconst utils = require('./utils');\n\nmodule.exports = (ast, options = {}) => {\n  let stringify = (node, parent = {}) => {\n    let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);\n    let invalidNode = node.invalid === true && options.escapeInvalid === true;\n    let output = '';\n\n    if (node.value) {\n      if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {\n        return '\\\\' + node.value;\n      }\n\n      return node.value;\n    }\n\n    if (node.value) {\n      return node.value;\n    }\n\n    if (node.nodes) {\n      for (let child of node.nodes) {\n        output += stringify(child);\n      }\n    }\n\n    return output;\n  };\n\n  return stringify(ast);\n};","'use strict';\n\nexports.isInteger = num => {\n  if (typeof num === 'number') {\n    return Number.isInteger(num);\n  }\n\n  if (typeof num === 'string' && num.trim() !== '') {\n    return Number.isInteger(Number(num));\n  }\n\n  return false;\n};\n/**\n * Find a node of the given type\n */\n\n\nexports.find = (node, type) => node.nodes.find(node => node.type === type);\n/**\n * Find a node of the given type\n */\n\n\nexports.exceedsLimit = (min, max, step = 1, limit) => {\n  if (limit === false) return false;\n  if (!exports.isInteger(min) || !exports.isInteger(max)) return false;\n  return (Number(max) - Number(min)) / Number(step) >= limit;\n};\n/**\n * Escape the given node with '\\\\' before node.value\n */\n\n\nexports.escapeNode = (block, n = 0, type) => {\n  let node = block.nodes[n];\n  if (!node) return;\n\n  if (type && node.type === type || node.type === 'open' || node.type === 'close') {\n    if (node.escaped !== true) {\n      node.value = '\\\\' + node.value;\n      node.escaped = true;\n    }\n  }\n};\n/**\n * Returns true if the given brace node should be enclosed in literal braces\n */\n\n\nexports.encloseBrace = node => {\n  if (node.type !== 'brace') return false;\n\n  if (node.commas >> 0 + node.ranges >> 0 === 0) {\n    node.invalid = true;\n    return true;\n  }\n\n  return false;\n};\n/**\n * Returns true if a brace node is invalid.\n */\n\n\nexports.isInvalidBrace = block => {\n  if (block.type !== 'brace') return false;\n  if (block.invalid === true || block.dollar) return true;\n\n  if (block.commas >> 0 + block.ranges >> 0 === 0) {\n    block.invalid = true;\n    return true;\n  }\n\n  if (block.open !== true || block.close !== true) {\n    block.invalid = true;\n    return true;\n  }\n\n  return false;\n};\n/**\n * Returns true if a node is an open or close node\n */\n\n\nexports.isOpenOrClose = node => {\n  if (node.type === 'open' || node.type === 'close') {\n    return true;\n  }\n\n  return node.open === true || node.close === true;\n};\n/**\n * Reduce an array of text nodes.\n */\n\n\nexports.reduce = nodes => nodes.reduce((acc, node) => {\n  if (node.type === 'text') acc.push(node.value);\n  if (node.type === 'range') node.type = 'text';\n  return acc;\n}, []);\n/**\n * Flatten an array\n */\n\n\nexports.flatten = (...args) => {\n  const result = [];\n\n  const flat = arr => {\n    for (let i = 0; i < arr.length; i++) {\n      let ele = arr[i];\n      Array.isArray(ele) ? flat(ele, result) : ele !== void 0 && result.push(ele);\n    }\n\n    return result;\n  };\n\n  flat(args);\n  return result;\n};","var path = require('path');\n\nvar spawn = require('child_process').spawn;\n\nvar debug = require('debug')('electron-squirrel-startup');\n\nvar app = require('electron').app;\n\nvar run = function (args, done) {\n  var updateExe = path.resolve(path.dirname(process.execPath), '..', 'Update.exe');\n  debug('Spawning `%s` with args `%s`', updateExe, args);\n  spawn(updateExe, args, {\n    detached: true\n  }).on('close', done);\n};\n\nvar check = function () {\n  if (process.platform === 'win32') {\n    var cmd = process.argv[1];\n    debug('processing squirrel command `%s`', cmd);\n    var target = path.basename(process.execPath);\n\n    if (cmd === '--squirrel-install' || cmd === '--squirrel-updated') {\n      run(['--createShortcut=' + target + ''], app.quit);\n      return true;\n    }\n\n    if (cmd === '--squirrel-uninstall') {\n      run(['--removeShortcut=' + target + ''], app.quit);\n      return true;\n    }\n\n    if (cmd === '--squirrel-obsolete') {\n      app.quit();\n      return true;\n    }\n  }\n\n  return false;\n};\n\nmodule.exports = check();","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();\n/**\n * Colors.\n */\n\nexports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  } // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\n\n  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // is firebug? http://stackoverflow.com/a/398120/376773\n  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // is firefox >= v31?\n  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // double check webkit in userAgent just in case we are in a worker\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n}\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\n\nexports.formatters.j = function (v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n  args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);\n  if (!useColors) return;\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit'); // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function (match) {\n    if ('%%' === match) return;\n    index++;\n\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n  args.splice(lastC, 0, c);\n}\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch (e) {}\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\n\nfunction load() {\n  var r;\n\n  try {\n    r = exports.storage.debug;\n  } catch (e) {} // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\n\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\n\nexports.enable(load());\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}","/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0,\n      i;\n\n  for (i in namespace) {\n    hash = (hash << 5) - hash + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\n\nfunction createDebug(namespace) {\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n    var self = debug; // set `diff` timestamp\n\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr; // turn the `arguments` into a proper Array\n\n    var args = new Array(arguments.length);\n\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    } // apply any `formatters` transformations\n\n\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val); // now we need to remove `args[index]` since it's inlined in the `format`\n\n        args.splice(index, 1);\n        index--;\n      }\n\n      return match;\n    }); // apply env-specific formatting (colors, etc.)\n\n    exports.formatArgs.call(self, args);\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace); // env-specific initialization logic for debug instances\n\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  return debug;\n}\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n  exports.names = [];\n  exports.skips = [];\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n\n    namespaces = split[i].replace(/\\*/g, '.*?');\n\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n/**\n * Disable debug output.\n *\n * @api public\n */\n\n\nfunction disable() {\n  exports.enable('');\n}\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\n\nfunction enabled(name) {\n  var i, len;\n\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}","/**\n * Detect Electron renderer process, which is node, but we should\n * treat as a browser.\n */\nif (typeof process !== 'undefined' && process.type === 'renderer') {\n  module.exports = require('./browser.js');\n} else {\n  module.exports = require('./node.js');\n}","/**\n * Module dependencies.\n */\nvar tty = require('tty');\n\nvar util = require('util');\n/**\n * This is the Node.js implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\n\nexports = module.exports = require('./debug');\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(function (key) {\n  return /^debug_/i.test(key);\n}).reduce(function (obj, key) {\n  // camel-case\n  var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function (_, k) {\n    return k.toUpperCase();\n  }); // coerce string value into JS value\n\n  var val = process.env[key];\n  if (/^(yes|on|true|enabled)$/i.test(val)) val = true;else if (/^(no|off|false|disabled)$/i.test(val)) val = false;else if (val === 'null') val = null;else val = Number(val);\n  obj[prop] = val;\n  return obj;\n}, {});\n/**\n * The file descriptor to write the `debug()` calls to.\n * Set the `DEBUG_FD` env variable to override with another value. i.e.:\n *\n *   $ DEBUG_FD=3 node script.js 3>debug.log\n */\n\nvar fd = parseInt(process.env.DEBUG_FD, 10) || 2;\n\nif (1 !== fd && 2 !== fd) {\n  util.deprecate(function () {}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')();\n}\n\nvar stream = 1 === fd ? process.stdout : 2 === fd ? process.stderr : createWritableStdioStream(fd);\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n  return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);\n}\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\n\nexports.formatters.o = function (v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts).split('\\n').map(function (str) {\n    return str.trim();\n  }).join(' ');\n};\n/**\n * Map %o to `util.inspect()`, allowing multiple lines if needed.\n */\n\n\nexports.formatters.O = function (v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts);\n};\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\n\nfunction formatArgs(args) {\n  var name = this.namespace;\n  var useColors = this.useColors;\n\n  if (useColors) {\n    var c = this.color;\n    var prefix = '  \\u001b[3' + c + ';1m' + name + ' ' + '\\u001b[0m';\n    args[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n    args.push('\\u001b[3' + c + 'm+' + exports.humanize(this.diff) + '\\u001b[0m');\n  } else {\n    args[0] = new Date().toUTCString() + ' ' + name + ' ' + args[0];\n  }\n}\n/**\n * Invokes `util.format()` with the specified arguments and writes to `stream`.\n */\n\n\nfunction log() {\n  return stream.write(util.format.apply(util, arguments) + '\\n');\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\n\nfunction save(namespaces) {\n  if (null == namespaces) {\n    // If you set a process.env field to null or undefined, it gets cast to the\n    // string 'null' or 'undefined'. Just delete instead.\n    delete process.env.DEBUG;\n  } else {\n    process.env.DEBUG = namespaces;\n  }\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\n\nfunction load() {\n  return process.env.DEBUG;\n}\n/**\n * Copied from `node/src/node.js`.\n *\n * XXX: It's lame that node doesn't expose this API out-of-the-box. It also\n * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.\n */\n\n\nfunction createWritableStdioStream(fd) {\n  var stream;\n  var tty_wrap = process.binding('tty_wrap'); // Note stream._type is used for test-module-load-list.js\n\n  switch (tty_wrap.guessHandleType(fd)) {\n    case 'TTY':\n      stream = new tty.WriteStream(fd);\n      stream._type = 'tty'; // Hack to have stream not keep the event loop alive.\n      // See https://github.com/joyent/node/issues/1726\n\n      if (stream._handle && stream._handle.unref) {\n        stream._handle.unref();\n      }\n\n      break;\n\n    case 'FILE':\n      var fs = require('fs');\n\n      stream = new fs.SyncWriteStream(fd, {\n        autoClose: false\n      });\n      stream._type = 'fs';\n      break;\n\n    case 'PIPE':\n    case 'TCP':\n      var net = require('net');\n\n      stream = new net.Socket({\n        fd: fd,\n        readable: false,\n        writable: true\n      }); // FIXME Should probably have an option in net.Socket to create a\n      // stream from an existing fd which is writable only. But for now\n      // we'll just add this hack and set the `readable` member to false.\n      // Test: ./node test/fixtures/echo.js < /etc/passwd\n\n      stream.readable = false;\n      stream.read = null;\n      stream._type = 'pipe'; // FIXME Hack to have stream not keep the event loop alive.\n      // See https://github.com/joyent/node/issues/1726\n\n      if (stream._handle && stream._handle.unref) {\n        stream._handle.unref();\n      }\n\n      break;\n\n    default:\n      // Probably an error on in uv_guess_handle()\n      throw new Error('Implement me. Unknown stream file type!');\n  } // For supporting legacy API we put the FD here.\n\n\n  stream.fd = fd;\n  stream._isStdio = true;\n  return stream;\n}\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\n\nfunction init(debug) {\n  debug.inspectOpts = {};\n  var keys = Object.keys(exports.inspectOpts);\n\n  for (var i = 0; i < keys.length; i++) {\n    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n  }\n}\n/**\n * Enable namespaces listed in `process.env.DEBUG` initially.\n */\n\n\nexports.enable(load());","/**\n * Helpers.\n */\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n\n  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));\n};\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\n\nfunction parse(str) {\n  str = String(str);\n\n  if (str.length > 100) {\n    return;\n  }\n\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\n\n  if (!match) {\n    return;\n  }\n\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n\n    default:\n      return undefined;\n  }\n}\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n\n  return ms + 'ms';\n}\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';\n}\n/**\n * Pluralization helper.\n */\n\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}","\"use strict\";\n\nconst taskManager = require(\"./managers/tasks\");\n\nconst patternManager = require(\"./managers/patterns\");\n\nconst async_1 = require(\"./providers/async\");\n\nconst stream_1 = require(\"./providers/stream\");\n\nconst sync_1 = require(\"./providers/sync\");\n\nconst settings_1 = require(\"./settings\");\n\nconst utils = require(\"./utils\");\n\nasync function FastGlob(source, options) {\n  assertPatternsInput(source);\n  const works = getWorks(source, async_1.default, options);\n  const result = await Promise.all(works);\n  return utils.array.flatten(result);\n} // https://github.com/typescript-eslint/typescript-eslint/issues/60\n// eslint-disable-next-line no-redeclare\n\n\n(function (FastGlob) {\n  function sync(source, options) {\n    assertPatternsInput(source);\n    const works = getWorks(source, sync_1.default, options);\n    return utils.array.flatten(works);\n  }\n\n  FastGlob.sync = sync;\n\n  function stream(source, options) {\n    assertPatternsInput(source);\n    const works = getWorks(source, stream_1.default, options);\n    /**\n     * The stream returned by the provider cannot work with an asynchronous iterator.\n     * To support asynchronous iterators, regardless of the number of tasks, we always multiplex streams.\n     * This affects performance (+25%). I don't see best solution right now.\n     */\n\n    return utils.stream.merge(works);\n  }\n\n  FastGlob.stream = stream;\n\n  function generateTasks(source, options) {\n    assertPatternsInput(source);\n    const patterns = patternManager.transform([].concat(source));\n    const settings = new settings_1.default(options);\n    return taskManager.generate(patterns, settings);\n  }\n\n  FastGlob.generateTasks = generateTasks;\n\n  function isDynamicPattern(source, options) {\n    assertPatternsInput(source);\n    const settings = new settings_1.default(options);\n    return utils.pattern.isDynamicPattern(source, settings);\n  }\n\n  FastGlob.isDynamicPattern = isDynamicPattern;\n\n  function escapePath(source) {\n    assertPatternsInput(source);\n    return utils.path.escape(source);\n  }\n\n  FastGlob.escapePath = escapePath;\n})(FastGlob || (FastGlob = {}));\n\nfunction getWorks(source, _Provider, options) {\n  const patterns = patternManager.transform([].concat(source));\n  const settings = new settings_1.default(options);\n  const tasks = taskManager.generate(patterns, settings);\n  const provider = new _Provider(settings);\n  return tasks.map(provider.read, provider);\n}\n\nfunction assertPatternsInput(input) {\n  const source = [].concat(input);\n  const isValidSource = source.every(item => utils.string.isString(item) && !utils.string.isEmpty(item));\n\n  if (!isValidSource) {\n    throw new TypeError('Patterns must be a string (non empty) or an array of strings');\n  }\n}\n\nmodule.exports = FastGlob;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeDuplicateSlashes = exports.transform = void 0;\n/**\n * Matches a sequence of two or more consecutive slashes, excluding the first two slashes at the beginning of the string.\n * The latter is due to the presence of the device path at the beginning of the UNC path.\n * @todo rewrite to negative lookbehind with the next major release.\n */\n\nconst DOUBLE_SLASH_RE = /(?!^)\\/{2,}/g;\n\nfunction transform(patterns) {\n  return patterns.map(pattern => removeDuplicateSlashes(pattern));\n}\n\nexports.transform = transform;\n/**\n * This package only works with forward slashes as a path separator.\n * Because of this, we cannot use the standard `path.normalize` method, because on Windows platform it will use of backslashes.\n */\n\nfunction removeDuplicateSlashes(pattern) {\n  return pattern.replace(DOUBLE_SLASH_RE, '/');\n}\n\nexports.removeDuplicateSlashes = removeDuplicateSlashes;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertPatternGroupToTask = exports.convertPatternGroupsToTasks = exports.groupPatternsByBaseDirectory = exports.getNegativePatternsAsPositive = exports.getPositivePatterns = exports.convertPatternsToTasks = exports.generate = void 0;\n\nconst utils = require(\"../utils\");\n\nfunction generate(patterns, settings) {\n  const positivePatterns = getPositivePatterns(patterns);\n  const negativePatterns = getNegativePatternsAsPositive(patterns, settings.ignore);\n  const staticPatterns = positivePatterns.filter(pattern => utils.pattern.isStaticPattern(pattern, settings));\n  const dynamicPatterns = positivePatterns.filter(pattern => utils.pattern.isDynamicPattern(pattern, settings));\n  const staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns,\n  /* dynamic */\n  false);\n  const dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns,\n  /* dynamic */\n  true);\n  return staticTasks.concat(dynamicTasks);\n}\n\nexports.generate = generate;\n/**\n * Returns tasks grouped by basic pattern directories.\n *\n * Patterns that can be found inside (`./`) and outside (`../`) the current directory are handled separately.\n * This is necessary because directory traversal starts at the base directory and goes deeper.\n */\n\nfunction convertPatternsToTasks(positive, negative, dynamic) {\n  const tasks = [];\n  const patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);\n  const patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);\n  const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);\n  const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);\n  tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));\n  /*\n   * For the sake of reducing future accesses to the file system, we merge all tasks within the current directory\n   * into a global task, if at least one pattern refers to the root (`.`). In this case, the global task covers the rest.\n   */\n\n  if ('.' in insideCurrentDirectoryGroup) {\n    tasks.push(convertPatternGroupToTask('.', patternsInsideCurrentDirectory, negative, dynamic));\n  } else {\n    tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));\n  }\n\n  return tasks;\n}\n\nexports.convertPatternsToTasks = convertPatternsToTasks;\n\nfunction getPositivePatterns(patterns) {\n  return utils.pattern.getPositivePatterns(patterns);\n}\n\nexports.getPositivePatterns = getPositivePatterns;\n\nfunction getNegativePatternsAsPositive(patterns, ignore) {\n  const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);\n  const positive = negative.map(utils.pattern.convertToPositivePattern);\n  return positive;\n}\n\nexports.getNegativePatternsAsPositive = getNegativePatternsAsPositive;\n\nfunction groupPatternsByBaseDirectory(patterns) {\n  const group = {};\n  return patterns.reduce((collection, pattern) => {\n    const base = utils.pattern.getBaseDirectory(pattern);\n\n    if (base in collection) {\n      collection[base].push(pattern);\n    } else {\n      collection[base] = [pattern];\n    }\n\n    return collection;\n  }, group);\n}\n\nexports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;\n\nfunction convertPatternGroupsToTasks(positive, negative, dynamic) {\n  return Object.keys(positive).map(base => {\n    return convertPatternGroupToTask(base, positive[base], negative, dynamic);\n  });\n}\n\nexports.convertPatternGroupsToTasks = convertPatternGroupsToTasks;\n\nfunction convertPatternGroupToTask(base, positive, negative, dynamic) {\n  return {\n    dynamic,\n    positive,\n    negative,\n    base,\n    patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))\n  };\n}\n\nexports.convertPatternGroupToTask = convertPatternGroupToTask;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst stream_1 = require(\"../readers/stream\");\n\nconst provider_1 = require(\"./provider\");\n\nclass ProviderAsync extends provider_1.default {\n  constructor() {\n    super(...arguments);\n    this._reader = new stream_1.default(this._settings);\n  }\n\n  read(task) {\n    const root = this._getRootDirectory(task);\n\n    const options = this._getReaderOptions(task);\n\n    const entries = [];\n    return new Promise((resolve, reject) => {\n      const stream = this.api(root, task, options);\n      stream.once('error', reject);\n      stream.on('data', entry => entries.push(options.transform(entry)));\n      stream.once('end', () => resolve(entries));\n    });\n  }\n\n  api(root, task, options) {\n    if (task.dynamic) {\n      return this._reader.dynamic(root, options);\n    }\n\n    return this._reader.static(task.patterns, options);\n  }\n\n}\n\nexports.default = ProviderAsync;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils = require(\"../../utils\");\n\nconst partial_1 = require(\"../matchers/partial\");\n\nclass DeepFilter {\n  constructor(_settings, _micromatchOptions) {\n    this._settings = _settings;\n    this._micromatchOptions = _micromatchOptions;\n  }\n\n  getFilter(basePath, positive, negative) {\n    const matcher = this._getMatcher(positive);\n\n    const negativeRe = this._getNegativePatternsRe(negative);\n\n    return entry => this._filter(basePath, entry, matcher, negativeRe);\n  }\n\n  _getMatcher(patterns) {\n    return new partial_1.default(patterns, this._settings, this._micromatchOptions);\n  }\n\n  _getNegativePatternsRe(patterns) {\n    const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);\n    return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);\n  }\n\n  _filter(basePath, entry, matcher, negativeRe) {\n    if (this._isSkippedByDeep(basePath, entry.path)) {\n      return false;\n    }\n\n    if (this._isSkippedSymbolicLink(entry)) {\n      return false;\n    }\n\n    const filepath = utils.path.removeLeadingDotSegment(entry.path);\n\n    if (this._isSkippedByPositivePatterns(filepath, matcher)) {\n      return false;\n    }\n\n    return this._isSkippedByNegativePatterns(filepath, negativeRe);\n  }\n\n  _isSkippedByDeep(basePath, entryPath) {\n    /**\n     * Avoid unnecessary depth calculations when it doesn't matter.\n     */\n    if (this._settings.deep === Infinity) {\n      return false;\n    }\n\n    return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;\n  }\n\n  _getEntryLevel(basePath, entryPath) {\n    const entryPathDepth = entryPath.split('/').length;\n\n    if (basePath === '') {\n      return entryPathDepth;\n    }\n\n    const basePathDepth = basePath.split('/').length;\n    return entryPathDepth - basePathDepth;\n  }\n\n  _isSkippedSymbolicLink(entry) {\n    return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();\n  }\n\n  _isSkippedByPositivePatterns(entryPath, matcher) {\n    return !this._settings.baseNameMatch && !matcher.match(entryPath);\n  }\n\n  _isSkippedByNegativePatterns(entryPath, patternsRe) {\n    return !utils.pattern.matchAny(entryPath, patternsRe);\n  }\n\n}\n\nexports.default = DeepFilter;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils = require(\"../../utils\");\n\nclass EntryFilter {\n  constructor(_settings, _micromatchOptions) {\n    this._settings = _settings;\n    this._micromatchOptions = _micromatchOptions;\n    this.index = new Map();\n  }\n\n  getFilter(positive, negative) {\n    const positiveRe = utils.pattern.convertPatternsToRe(positive, this._micromatchOptions);\n    const negativeRe = utils.pattern.convertPatternsToRe(negative, this._micromatchOptions);\n    return entry => this._filter(entry, positiveRe, negativeRe);\n  }\n\n  _filter(entry, positiveRe, negativeRe) {\n    if (this._settings.unique && this._isDuplicateEntry(entry)) {\n      return false;\n    }\n\n    if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {\n      return false;\n    }\n\n    if (this._isSkippedByAbsoluteNegativePatterns(entry.path, negativeRe)) {\n      return false;\n    }\n\n    const filepath = this._settings.baseNameMatch ? entry.name : entry.path;\n    const isMatched = this._isMatchToPatterns(filepath, positiveRe) && !this._isMatchToPatterns(entry.path, negativeRe);\n\n    if (this._settings.unique && isMatched) {\n      this._createIndexRecord(entry);\n    }\n\n    return isMatched;\n  }\n\n  _isDuplicateEntry(entry) {\n    return this.index.has(entry.path);\n  }\n\n  _createIndexRecord(entry) {\n    this.index.set(entry.path, undefined);\n  }\n\n  _onlyFileFilter(entry) {\n    return this._settings.onlyFiles && !entry.dirent.isFile();\n  }\n\n  _onlyDirectoryFilter(entry) {\n    return this._settings.onlyDirectories && !entry.dirent.isDirectory();\n  }\n\n  _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {\n    if (!this._settings.absolute) {\n      return false;\n    }\n\n    const fullpath = utils.path.makeAbsolute(this._settings.cwd, entryPath);\n    return utils.pattern.matchAny(fullpath, patternsRe);\n  }\n  /**\n   * First, just trying to apply patterns to the path.\n   * Second, trying to apply patterns to the path with final slash.\n   */\n\n\n  _isMatchToPatterns(entryPath, patternsRe) {\n    const filepath = utils.path.removeLeadingDotSegment(entryPath);\n    return utils.pattern.matchAny(filepath, patternsRe) || utils.pattern.matchAny(filepath + '/', patternsRe);\n  }\n\n}\n\nexports.default = EntryFilter;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils = require(\"../../utils\");\n\nclass ErrorFilter {\n  constructor(_settings) {\n    this._settings = _settings;\n  }\n\n  getFilter() {\n    return error => this._isNonFatalError(error);\n  }\n\n  _isNonFatalError(error) {\n    return utils.errno.isEnoentCodeError(error) || this._settings.suppressErrors;\n  }\n\n}\n\nexports.default = ErrorFilter;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils = require(\"../../utils\");\n\nclass Matcher {\n  constructor(_patterns, _settings, _micromatchOptions) {\n    this._patterns = _patterns;\n    this._settings = _settings;\n    this._micromatchOptions = _micromatchOptions;\n    this._storage = [];\n\n    this._fillStorage();\n  }\n\n  _fillStorage() {\n    /**\n     * The original pattern may include `{,*,**,a/*}`, which will lead to problems with matching (unresolved level).\n     * So, before expand patterns with brace expansion into separated patterns.\n     */\n    const patterns = utils.pattern.expandPatternsWithBraceExpansion(this._patterns);\n\n    for (const pattern of patterns) {\n      const segments = this._getPatternSegments(pattern);\n\n      const sections = this._splitSegmentsIntoSections(segments);\n\n      this._storage.push({\n        complete: sections.length <= 1,\n        pattern,\n        segments,\n        sections\n      });\n    }\n  }\n\n  _getPatternSegments(pattern) {\n    const parts = utils.pattern.getPatternParts(pattern, this._micromatchOptions);\n    return parts.map(part => {\n      const dynamic = utils.pattern.isDynamicPattern(part, this._settings);\n\n      if (!dynamic) {\n        return {\n          dynamic: false,\n          pattern: part\n        };\n      }\n\n      return {\n        dynamic: true,\n        pattern: part,\n        patternRe: utils.pattern.makeRe(part, this._micromatchOptions)\n      };\n    });\n  }\n\n  _splitSegmentsIntoSections(segments) {\n    return utils.array.splitWhen(segments, segment => segment.dynamic && utils.pattern.hasGlobStar(segment.pattern));\n  }\n\n}\n\nexports.default = Matcher;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst matcher_1 = require(\"./matcher\");\n\nclass PartialMatcher extends matcher_1.default {\n  match(filepath) {\n    const parts = filepath.split('/');\n    const levels = parts.length;\n\n    const patterns = this._storage.filter(info => !info.complete || info.segments.length > levels);\n\n    for (const pattern of patterns) {\n      const section = pattern.sections[0];\n      /**\n       * In this case, the pattern has a globstar and we must read all directories unconditionally,\n       * but only if the level has reached the end of the first group.\n       *\n       * fixtures/{a,b}/**\n       *  ^ true/false  ^ always true\n      */\n\n      if (!pattern.complete && levels > section.length) {\n        return true;\n      }\n\n      const match = parts.every((part, index) => {\n        const segment = pattern.segments[index];\n\n        if (segment.dynamic && segment.patternRe.test(part)) {\n          return true;\n        }\n\n        if (!segment.dynamic && segment.pattern === part) {\n          return true;\n        }\n\n        return false;\n      });\n\n      if (match) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nexports.default = PartialMatcher;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst path = require(\"path\");\n\nconst deep_1 = require(\"./filters/deep\");\n\nconst entry_1 = require(\"./filters/entry\");\n\nconst error_1 = require(\"./filters/error\");\n\nconst entry_2 = require(\"./transformers/entry\");\n\nclass Provider {\n  constructor(_settings) {\n    this._settings = _settings;\n    this.errorFilter = new error_1.default(this._settings);\n    this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());\n    this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());\n    this.entryTransformer = new entry_2.default(this._settings);\n  }\n\n  _getRootDirectory(task) {\n    return path.resolve(this._settings.cwd, task.base);\n  }\n\n  _getReaderOptions(task) {\n    const basePath = task.base === '.' ? '' : task.base;\n    return {\n      basePath,\n      pathSegmentSeparator: '/',\n      concurrency: this._settings.concurrency,\n      deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),\n      entryFilter: this.entryFilter.getFilter(task.positive, task.negative),\n      errorFilter: this.errorFilter.getFilter(),\n      followSymbolicLinks: this._settings.followSymbolicLinks,\n      fs: this._settings.fs,\n      stats: this._settings.stats,\n      throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,\n      transform: this.entryTransformer.getTransformer()\n    };\n  }\n\n  _getMicromatchOptions() {\n    return {\n      dot: this._settings.dot,\n      matchBase: this._settings.baseNameMatch,\n      nobrace: !this._settings.braceExpansion,\n      nocase: !this._settings.caseSensitiveMatch,\n      noext: !this._settings.extglob,\n      noglobstar: !this._settings.globstar,\n      posix: true,\n      strictSlashes: false\n    };\n  }\n\n}\n\nexports.default = Provider;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst stream_1 = require(\"stream\");\n\nconst stream_2 = require(\"../readers/stream\");\n\nconst provider_1 = require(\"./provider\");\n\nclass ProviderStream extends provider_1.default {\n  constructor() {\n    super(...arguments);\n    this._reader = new stream_2.default(this._settings);\n  }\n\n  read(task) {\n    const root = this._getRootDirectory(task);\n\n    const options = this._getReaderOptions(task);\n\n    const source = this.api(root, task, options);\n    const destination = new stream_1.Readable({\n      objectMode: true,\n      read: () => {}\n    });\n    source.once('error', error => destination.emit('error', error)).on('data', entry => destination.emit('data', options.transform(entry))).once('end', () => destination.emit('end'));\n    destination.once('close', () => source.destroy());\n    return destination;\n  }\n\n  api(root, task, options) {\n    if (task.dynamic) {\n      return this._reader.dynamic(root, options);\n    }\n\n    return this._reader.static(task.patterns, options);\n  }\n\n}\n\nexports.default = ProviderStream;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst sync_1 = require(\"../readers/sync\");\n\nconst provider_1 = require(\"./provider\");\n\nclass ProviderSync extends provider_1.default {\n  constructor() {\n    super(...arguments);\n    this._reader = new sync_1.default(this._settings);\n  }\n\n  read(task) {\n    const root = this._getRootDirectory(task);\n\n    const options = this._getReaderOptions(task);\n\n    const entries = this.api(root, task, options);\n    return entries.map(options.transform);\n  }\n\n  api(root, task, options) {\n    if (task.dynamic) {\n      return this._reader.dynamic(root, options);\n    }\n\n    return this._reader.static(task.patterns, options);\n  }\n\n}\n\nexports.default = ProviderSync;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils = require(\"../../utils\");\n\nclass EntryTransformer {\n  constructor(_settings) {\n    this._settings = _settings;\n  }\n\n  getTransformer() {\n    return entry => this._transform(entry);\n  }\n\n  _transform(entry) {\n    let filepath = entry.path;\n\n    if (this._settings.absolute) {\n      filepath = utils.path.makeAbsolute(this._settings.cwd, filepath);\n      filepath = utils.path.unixify(filepath);\n    }\n\n    if (this._settings.markDirectories && entry.dirent.isDirectory()) {\n      filepath += '/';\n    }\n\n    if (!this._settings.objectMode) {\n      return filepath;\n    }\n\n    return Object.assign(Object.assign({}, entry), {\n      path: filepath\n    });\n  }\n\n}\n\nexports.default = EntryTransformer;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst path = require(\"path\");\n\nconst fsStat = require(\"@nodelib/fs.stat\");\n\nconst utils = require(\"../utils\");\n\nclass Reader {\n  constructor(_settings) {\n    this._settings = _settings;\n    this._fsStatSettings = new fsStat.Settings({\n      followSymbolicLink: this._settings.followSymbolicLinks,\n      fs: this._settings.fs,\n      throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks\n    });\n  }\n\n  _getFullEntryPath(filepath) {\n    return path.resolve(this._settings.cwd, filepath);\n  }\n\n  _makeEntry(stats, pattern) {\n    const entry = {\n      name: pattern,\n      path: pattern,\n      dirent: utils.fs.createDirentFromStats(pattern, stats)\n    };\n\n    if (this._settings.stats) {\n      entry.stats = stats;\n    }\n\n    return entry;\n  }\n\n  _isFatalError(error) {\n    return !utils.errno.isEnoentCodeError(error) && !this._settings.suppressErrors;\n  }\n\n}\n\nexports.default = Reader;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst stream_1 = require(\"stream\");\n\nconst fsStat = require(\"@nodelib/fs.stat\");\n\nconst fsWalk = require(\"@nodelib/fs.walk\");\n\nconst reader_1 = require(\"./reader\");\n\nclass ReaderStream extends reader_1.default {\n  constructor() {\n    super(...arguments);\n    this._walkStream = fsWalk.walkStream;\n    this._stat = fsStat.stat;\n  }\n\n  dynamic(root, options) {\n    return this._walkStream(root, options);\n  }\n\n  static(patterns, options) {\n    const filepaths = patterns.map(this._getFullEntryPath, this);\n    const stream = new stream_1.PassThrough({\n      objectMode: true\n    });\n\n    stream._write = (index, _enc, done) => {\n      return this._getEntry(filepaths[index], patterns[index], options).then(entry => {\n        if (entry !== null && options.entryFilter(entry)) {\n          stream.push(entry);\n        }\n\n        if (index === filepaths.length - 1) {\n          stream.end();\n        }\n\n        done();\n      }).catch(done);\n    };\n\n    for (let i = 0; i < filepaths.length; i++) {\n      stream.write(i);\n    }\n\n    return stream;\n  }\n\n  _getEntry(filepath, pattern, options) {\n    return this._getStat(filepath).then(stats => this._makeEntry(stats, pattern)).catch(error => {\n      if (options.errorFilter(error)) {\n        return null;\n      }\n\n      throw error;\n    });\n  }\n\n  _getStat(filepath) {\n    return new Promise((resolve, reject) => {\n      this._stat(filepath, this._fsStatSettings, (error, stats) => {\n        return error === null ? resolve(stats) : reject(error);\n      });\n    });\n  }\n\n}\n\nexports.default = ReaderStream;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fsStat = require(\"@nodelib/fs.stat\");\n\nconst fsWalk = require(\"@nodelib/fs.walk\");\n\nconst reader_1 = require(\"./reader\");\n\nclass ReaderSync extends reader_1.default {\n  constructor() {\n    super(...arguments);\n    this._walkSync = fsWalk.walkSync;\n    this._statSync = fsStat.statSync;\n  }\n\n  dynamic(root, options) {\n    return this._walkSync(root, options);\n  }\n\n  static(patterns, options) {\n    const entries = [];\n\n    for (const pattern of patterns) {\n      const filepath = this._getFullEntryPath(pattern);\n\n      const entry = this._getEntry(filepath, pattern, options);\n\n      if (entry === null || !options.entryFilter(entry)) {\n        continue;\n      }\n\n      entries.push(entry);\n    }\n\n    return entries;\n  }\n\n  _getEntry(filepath, pattern, options) {\n    try {\n      const stats = this._getStat(filepath);\n\n      return this._makeEntry(stats, pattern);\n    } catch (error) {\n      if (options.errorFilter(error)) {\n        return null;\n      }\n\n      throw error;\n    }\n  }\n\n  _getStat(filepath) {\n    return this._statSync(filepath, this._fsStatSettings);\n  }\n\n}\n\nexports.default = ReaderSync;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;\n\nconst fs = require(\"fs\");\n\nconst os = require(\"os\");\n/**\n * The `os.cpus` method can return zero. We expect the number of cores to be greater than zero.\n * https://github.com/nodejs/node/blob/7faeddf23a98c53896f8b574a6e66589e8fb1eb8/lib/os.js#L106-L107\n */\n\n\nconst CPU_COUNT = Math.max(os.cpus().length, 1);\nexports.DEFAULT_FILE_SYSTEM_ADAPTER = {\n  lstat: fs.lstat,\n  lstatSync: fs.lstatSync,\n  stat: fs.stat,\n  statSync: fs.statSync,\n  readdir: fs.readdir,\n  readdirSync: fs.readdirSync\n};\n\nclass Settings {\n  constructor(_options = {}) {\n    this._options = _options;\n    this.absolute = this._getValue(this._options.absolute, false);\n    this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);\n    this.braceExpansion = this._getValue(this._options.braceExpansion, true);\n    this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);\n    this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);\n    this.cwd = this._getValue(this._options.cwd, process.cwd());\n    this.deep = this._getValue(this._options.deep, Infinity);\n    this.dot = this._getValue(this._options.dot, false);\n    this.extglob = this._getValue(this._options.extglob, true);\n    this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);\n    this.fs = this._getFileSystemMethods(this._options.fs);\n    this.globstar = this._getValue(this._options.globstar, true);\n    this.ignore = this._getValue(this._options.ignore, []);\n    this.markDirectories = this._getValue(this._options.markDirectories, false);\n    this.objectMode = this._getValue(this._options.objectMode, false);\n    this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);\n    this.onlyFiles = this._getValue(this._options.onlyFiles, true);\n    this.stats = this._getValue(this._options.stats, false);\n    this.suppressErrors = this._getValue(this._options.suppressErrors, false);\n    this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);\n    this.unique = this._getValue(this._options.unique, true);\n\n    if (this.onlyDirectories) {\n      this.onlyFiles = false;\n    }\n\n    if (this.stats) {\n      this.objectMode = true;\n    }\n  }\n\n  _getValue(option, value) {\n    return option === undefined ? value : option;\n  }\n\n  _getFileSystemMethods(methods = {}) {\n    return Object.assign(Object.assign({}, exports.DEFAULT_FILE_SYSTEM_ADAPTER), methods);\n  }\n\n}\n\nexports.default = Settings;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.splitWhen = exports.flatten = void 0;\n\nfunction flatten(items) {\n  return items.reduce((collection, item) => [].concat(collection, item), []);\n}\n\nexports.flatten = flatten;\n\nfunction splitWhen(items, predicate) {\n  const result = [[]];\n  let groupIndex = 0;\n\n  for (const item of items) {\n    if (predicate(item)) {\n      groupIndex++;\n      result[groupIndex] = [];\n    } else {\n      result[groupIndex].push(item);\n    }\n  }\n\n  return result;\n}\n\nexports.splitWhen = splitWhen;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isEnoentCodeError = void 0;\n\nfunction isEnoentCodeError(error) {\n  return error.code === 'ENOENT';\n}\n\nexports.isEnoentCodeError = isEnoentCodeError;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDirentFromStats = void 0;\n\nclass DirentFromStats {\n  constructor(name, stats) {\n    this.name = name;\n    this.isBlockDevice = stats.isBlockDevice.bind(stats);\n    this.isCharacterDevice = stats.isCharacterDevice.bind(stats);\n    this.isDirectory = stats.isDirectory.bind(stats);\n    this.isFIFO = stats.isFIFO.bind(stats);\n    this.isFile = stats.isFile.bind(stats);\n    this.isSocket = stats.isSocket.bind(stats);\n    this.isSymbolicLink = stats.isSymbolicLink.bind(stats);\n  }\n\n}\n\nfunction createDirentFromStats(name, stats) {\n  return new DirentFromStats(name, stats);\n}\n\nexports.createDirentFromStats = createDirentFromStats;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.string = exports.stream = exports.pattern = exports.path = exports.fs = exports.errno = exports.array = void 0;\n\nconst array = require(\"./array\");\n\nexports.array = array;\n\nconst errno = require(\"./errno\");\n\nexports.errno = errno;\n\nconst fs = require(\"./fs\");\n\nexports.fs = fs;\n\nconst path = require(\"./path\");\n\nexports.path = path;\n\nconst pattern = require(\"./pattern\");\n\nexports.pattern = pattern;\n\nconst stream = require(\"./stream\");\n\nexports.stream = stream;\n\nconst string = require(\"./string\");\n\nexports.string = string;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeLeadingDotSegment = exports.escape = exports.makeAbsolute = exports.unixify = void 0;\n\nconst path = require(\"path\");\n\nconst LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2; // ./ or .\\\\\n\nconst UNESCAPED_GLOB_SYMBOLS_RE = /(\\\\?)([()*?[\\]{|}]|^!|[!+@](?=\\())/g;\n/**\n * Designed to work only with simple paths: `dir\\\\file`.\n */\n\nfunction unixify(filepath) {\n  return filepath.replace(/\\\\/g, '/');\n}\n\nexports.unixify = unixify;\n\nfunction makeAbsolute(cwd, filepath) {\n  return path.resolve(cwd, filepath);\n}\n\nexports.makeAbsolute = makeAbsolute;\n\nfunction escape(pattern) {\n  return pattern.replace(UNESCAPED_GLOB_SYMBOLS_RE, '\\\\$2');\n}\n\nexports.escape = escape;\n\nfunction removeLeadingDotSegment(entry) {\n  // We do not use `startsWith` because this is 10x slower than current implementation for some cases.\n  // eslint-disable-next-line @typescript-eslint/prefer-string-starts-ends-with\n  if (entry.charAt(0) === '.') {\n    const secondCharactery = entry.charAt(1);\n\n    if (secondCharactery === '/' || secondCharactery === '\\\\') {\n      return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);\n    }\n  }\n\n  return entry;\n}\n\nexports.removeLeadingDotSegment = removeLeadingDotSegment;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.matchAny = exports.convertPatternsToRe = exports.makeRe = exports.getPatternParts = exports.expandBraceExpansion = exports.expandPatternsWithBraceExpansion = exports.isAffectDepthOfReadingPattern = exports.endsWithSlashGlobStar = exports.hasGlobStar = exports.getBaseDirectory = exports.isPatternRelatedToParentDirectory = exports.getPatternsOutsideCurrentDirectory = exports.getPatternsInsideCurrentDirectory = exports.getPositivePatterns = exports.getNegativePatterns = exports.isPositivePattern = exports.isNegativePattern = exports.convertToNegativePattern = exports.convertToPositivePattern = exports.isDynamicPattern = exports.isStaticPattern = void 0;\n\nconst path = require(\"path\");\n\nconst globParent = require(\"glob-parent\");\n\nconst micromatch = require(\"micromatch\");\n\nconst GLOBSTAR = '**';\nconst ESCAPE_SYMBOL = '\\\\';\nconst COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;\nconst REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\\[[^[]*]/;\nconst REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\\([^(]*\\|[^|]*\\)/;\nconst GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\\([^(]*\\)/;\nconst BRACE_EXPANSION_SEPARATORS_RE = /,|\\.\\./;\n\nfunction isStaticPattern(pattern, options = {}) {\n  return !isDynamicPattern(pattern, options);\n}\n\nexports.isStaticPattern = isStaticPattern;\n\nfunction isDynamicPattern(pattern, options = {}) {\n  /**\n   * A special case with an empty string is necessary for matching patterns that start with a forward slash.\n   * An empty string cannot be a dynamic pattern.\n   * For example, the pattern `/lib/*` will be spread into parts: '', 'lib', '*'.\n   */\n  if (pattern === '') {\n    return false;\n  }\n  /**\n   * When the `caseSensitiveMatch` option is disabled, all patterns must be marked as dynamic, because we cannot check\n   * filepath directly (without read directory).\n   */\n\n\n  if (options.caseSensitiveMatch === false || pattern.includes(ESCAPE_SYMBOL)) {\n    return true;\n  }\n\n  if (COMMON_GLOB_SYMBOLS_RE.test(pattern) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) || REGEX_GROUP_SYMBOLS_RE.test(pattern)) {\n    return true;\n  }\n\n  if (options.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern)) {\n    return true;\n  }\n\n  if (options.braceExpansion !== false && hasBraceExpansion(pattern)) {\n    return true;\n  }\n\n  return false;\n}\n\nexports.isDynamicPattern = isDynamicPattern;\n\nfunction hasBraceExpansion(pattern) {\n  const openingBraceIndex = pattern.indexOf('{');\n\n  if (openingBraceIndex === -1) {\n    return false;\n  }\n\n  const closingBraceIndex = pattern.indexOf('}', openingBraceIndex + 1);\n\n  if (closingBraceIndex === -1) {\n    return false;\n  }\n\n  const braceContent = pattern.slice(openingBraceIndex, closingBraceIndex);\n  return BRACE_EXPANSION_SEPARATORS_RE.test(braceContent);\n}\n\nfunction convertToPositivePattern(pattern) {\n  return isNegativePattern(pattern) ? pattern.slice(1) : pattern;\n}\n\nexports.convertToPositivePattern = convertToPositivePattern;\n\nfunction convertToNegativePattern(pattern) {\n  return '!' + pattern;\n}\n\nexports.convertToNegativePattern = convertToNegativePattern;\n\nfunction isNegativePattern(pattern) {\n  return pattern.startsWith('!') && pattern[1] !== '(';\n}\n\nexports.isNegativePattern = isNegativePattern;\n\nfunction isPositivePattern(pattern) {\n  return !isNegativePattern(pattern);\n}\n\nexports.isPositivePattern = isPositivePattern;\n\nfunction getNegativePatterns(patterns) {\n  return patterns.filter(isNegativePattern);\n}\n\nexports.getNegativePatterns = getNegativePatterns;\n\nfunction getPositivePatterns(patterns) {\n  return patterns.filter(isPositivePattern);\n}\n\nexports.getPositivePatterns = getPositivePatterns;\n/**\n * Returns patterns that can be applied inside the current directory.\n *\n * @example\n * // ['./*', '*', 'a/*']\n * getPatternsInsideCurrentDirectory(['./*', '*', 'a/*', '../*', './../*'])\n */\n\nfunction getPatternsInsideCurrentDirectory(patterns) {\n  return patterns.filter(pattern => !isPatternRelatedToParentDirectory(pattern));\n}\n\nexports.getPatternsInsideCurrentDirectory = getPatternsInsideCurrentDirectory;\n/**\n * Returns patterns to be expanded relative to (outside) the current directory.\n *\n * @example\n * // ['../*', './../*']\n * getPatternsInsideCurrentDirectory(['./*', '*', 'a/*', '../*', './../*'])\n */\n\nfunction getPatternsOutsideCurrentDirectory(patterns) {\n  return patterns.filter(isPatternRelatedToParentDirectory);\n}\n\nexports.getPatternsOutsideCurrentDirectory = getPatternsOutsideCurrentDirectory;\n\nfunction isPatternRelatedToParentDirectory(pattern) {\n  return pattern.startsWith('..') || pattern.startsWith('./..');\n}\n\nexports.isPatternRelatedToParentDirectory = isPatternRelatedToParentDirectory;\n\nfunction getBaseDirectory(pattern) {\n  return globParent(pattern, {\n    flipBackslashes: false\n  });\n}\n\nexports.getBaseDirectory = getBaseDirectory;\n\nfunction hasGlobStar(pattern) {\n  return pattern.includes(GLOBSTAR);\n}\n\nexports.hasGlobStar = hasGlobStar;\n\nfunction endsWithSlashGlobStar(pattern) {\n  return pattern.endsWith('/' + GLOBSTAR);\n}\n\nexports.endsWithSlashGlobStar = endsWithSlashGlobStar;\n\nfunction isAffectDepthOfReadingPattern(pattern) {\n  const basename = path.basename(pattern);\n  return endsWithSlashGlobStar(pattern) || isStaticPattern(basename);\n}\n\nexports.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;\n\nfunction expandPatternsWithBraceExpansion(patterns) {\n  return patterns.reduce((collection, pattern) => {\n    return collection.concat(expandBraceExpansion(pattern));\n  }, []);\n}\n\nexports.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;\n\nfunction expandBraceExpansion(pattern) {\n  return micromatch.braces(pattern, {\n    expand: true,\n    nodupes: true\n  });\n}\n\nexports.expandBraceExpansion = expandBraceExpansion;\n\nfunction getPatternParts(pattern, options) {\n  let {\n    parts\n  } = micromatch.scan(pattern, Object.assign(Object.assign({}, options), {\n    parts: true\n  }));\n  /**\n   * The scan method returns an empty array in some cases.\n   * See micromatch/picomatch#58 for more details.\n   */\n\n  if (parts.length === 0) {\n    parts = [pattern];\n  }\n  /**\n   * The scan method does not return an empty part for the pattern with a forward slash.\n   * This is another part of micromatch/picomatch#58.\n   */\n\n\n  if (parts[0].startsWith('/')) {\n    parts[0] = parts[0].slice(1);\n    parts.unshift('');\n  }\n\n  return parts;\n}\n\nexports.getPatternParts = getPatternParts;\n\nfunction makeRe(pattern, options) {\n  return micromatch.makeRe(pattern, options);\n}\n\nexports.makeRe = makeRe;\n\nfunction convertPatternsToRe(patterns, options) {\n  return patterns.map(pattern => makeRe(pattern, options));\n}\n\nexports.convertPatternsToRe = convertPatternsToRe;\n\nfunction matchAny(entry, patternsRe) {\n  return patternsRe.some(patternRe => patternRe.test(entry));\n}\n\nexports.matchAny = matchAny;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.merge = void 0;\n\nconst merge2 = require(\"merge2\");\n\nfunction merge(streams) {\n  const mergedStream = merge2(streams);\n  streams.forEach(stream => {\n    stream.once('error', error => mergedStream.emit('error', error));\n  });\n  mergedStream.once('close', () => propagateCloseEventToSources(streams));\n  mergedStream.once('end', () => propagateCloseEventToSources(streams));\n  return mergedStream;\n}\n\nexports.merge = merge;\n\nfunction propagateCloseEventToSources(streams) {\n  streams.forEach(stream => stream.emit('close'));\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isEmpty = exports.isString = void 0;\n\nfunction isString(input) {\n  return typeof input === 'string';\n}\n\nexports.isString = isString;\n\nfunction isEmpty(input) {\n  return input === '';\n}\n\nexports.isEmpty = isEmpty;","'use strict';\n/* eslint-disable no-var */\n\nvar reusify = require('reusify');\n\nfunction fastqueue(context, worker, concurrency) {\n  if (typeof context === 'function') {\n    concurrency = worker;\n    worker = context;\n    context = null;\n  }\n\n  if (concurrency < 1) {\n    throw new Error('fastqueue concurrency must be greater than 1');\n  }\n\n  var cache = reusify(Task);\n  var queueHead = null;\n  var queueTail = null;\n  var _running = 0;\n  var errorHandler = null;\n  var self = {\n    push: push,\n    drain: noop,\n    saturated: noop,\n    pause: pause,\n    paused: false,\n    concurrency: concurrency,\n    running: running,\n    resume: resume,\n    idle: idle,\n    length: length,\n    getQueue: getQueue,\n    unshift: unshift,\n    empty: noop,\n    kill: kill,\n    killAndDrain: killAndDrain,\n    error: error\n  };\n  return self;\n\n  function running() {\n    return _running;\n  }\n\n  function pause() {\n    self.paused = true;\n  }\n\n  function length() {\n    var current = queueHead;\n    var counter = 0;\n\n    while (current) {\n      current = current.next;\n      counter++;\n    }\n\n    return counter;\n  }\n\n  function getQueue() {\n    var current = queueHead;\n    var tasks = [];\n\n    while (current) {\n      tasks.push(current.value);\n      current = current.next;\n    }\n\n    return tasks;\n  }\n\n  function resume() {\n    if (!self.paused) return;\n    self.paused = false;\n\n    for (var i = 0; i < self.concurrency; i++) {\n      _running++;\n      release();\n    }\n  }\n\n  function idle() {\n    return _running === 0 && self.length() === 0;\n  }\n\n  function push(value, done) {\n    var current = cache.get();\n    current.context = context;\n    current.release = release;\n    current.value = value;\n    current.callback = done || noop;\n    current.errorHandler = errorHandler;\n\n    if (_running === self.concurrency || self.paused) {\n      if (queueTail) {\n        queueTail.next = current;\n        queueTail = current;\n      } else {\n        queueHead = current;\n        queueTail = current;\n        self.saturated();\n      }\n    } else {\n      _running++;\n      worker.call(context, current.value, current.worked);\n    }\n  }\n\n  function unshift(value, done) {\n    var current = cache.get();\n    current.context = context;\n    current.release = release;\n    current.value = value;\n    current.callback = done || noop;\n\n    if (_running === self.concurrency || self.paused) {\n      if (queueHead) {\n        current.next = queueHead;\n        queueHead = current;\n      } else {\n        queueHead = current;\n        queueTail = current;\n        self.saturated();\n      }\n    } else {\n      _running++;\n      worker.call(context, current.value, current.worked);\n    }\n  }\n\n  function release(holder) {\n    if (holder) {\n      cache.release(holder);\n    }\n\n    var next = queueHead;\n\n    if (next) {\n      if (!self.paused) {\n        if (queueTail === queueHead) {\n          queueTail = null;\n        }\n\n        queueHead = next.next;\n        next.next = null;\n        worker.call(context, next.value, next.worked);\n\n        if (queueTail === null) {\n          self.empty();\n        }\n      } else {\n        _running--;\n      }\n    } else if (--_running === 0) {\n      self.drain();\n    }\n  }\n\n  function kill() {\n    queueHead = null;\n    queueTail = null;\n    self.drain = noop;\n  }\n\n  function killAndDrain() {\n    queueHead = null;\n    queueTail = null;\n    self.drain();\n    self.drain = noop;\n  }\n\n  function error(handler) {\n    errorHandler = handler;\n  }\n}\n\nfunction noop() {}\n\nfunction Task() {\n  this.value = null;\n  this.callback = noop;\n  this.next = null;\n  this.release = noop;\n  this.context = null;\n  this.errorHandler = null;\n  var self = this;\n\n  this.worked = function worked(err, result) {\n    var callback = self.callback;\n    var errorHandler = self.errorHandler;\n    var val = self.value;\n    self.value = null;\n    self.callback = noop;\n\n    if (self.errorHandler) {\n      errorHandler(err, val);\n    }\n\n    callback.call(self.context, err, result);\n    self.release(self);\n  };\n}\n\nfunction queueAsPromised(context, worker, concurrency) {\n  if (typeof context === 'function') {\n    concurrency = worker;\n    worker = context;\n    context = null;\n  }\n\n  function asyncWrapper(arg, cb) {\n    worker.call(this, arg).then(function (res) {\n      cb(null, res);\n    }, cb);\n  }\n\n  var queue = fastqueue(context, asyncWrapper, concurrency);\n  var pushCb = queue.push;\n  var unshiftCb = queue.unshift;\n  queue.push = push;\n  queue.unshift = unshift;\n  queue.drained = drained;\n  return queue;\n\n  function push(value) {\n    var p = new Promise(function (resolve, reject) {\n      pushCb(value, function (err, result) {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(result);\n      });\n    }); // Let's fork the promise chain to\n    // make the error bubble up to the user but\n    // not lead to a unhandledRejection\n\n    p.catch(noop);\n    return p;\n  }\n\n  function unshift(value) {\n    var p = new Promise(function (resolve, reject) {\n      unshiftCb(value, function (err, result) {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(result);\n      });\n    }); // Let's fork the promise chain to\n    // make the error bubble up to the user but\n    // not lead to a unhandledRejection\n\n    p.catch(noop);\n    return p;\n  }\n\n  function drained() {\n    var previousDrain = queue.drain;\n    var p = new Promise(function (resolve) {\n      queue.drain = function () {\n        previousDrain();\n        resolve();\n      };\n    });\n    return p;\n  }\n}\n\nmodule.exports = fastqueue;\nmodule.exports.promise = queueAsPromised;","/*!\n * fill-range <https://github.com/jonschlinkert/fill-range>\n *\n * Copyright (c) 2014-present, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n'use strict';\n\nconst util = require('util');\n\nconst toRegexRange = require('to-regex-range');\n\nconst isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);\n\nconst transform = toNumber => {\n  return value => toNumber === true ? Number(value) : String(value);\n};\n\nconst isValidValue = value => {\n  return typeof value === 'number' || typeof value === 'string' && value !== '';\n};\n\nconst isNumber = num => Number.isInteger(+num);\n\nconst zeros = input => {\n  let value = `${input}`;\n  let index = -1;\n  if (value[0] === '-') value = value.slice(1);\n  if (value === '0') return false;\n\n  while (value[++index] === '0');\n\n  return index > 0;\n};\n\nconst stringify = (start, end, options) => {\n  if (typeof start === 'string' || typeof end === 'string') {\n    return true;\n  }\n\n  return options.stringify === true;\n};\n\nconst pad = (input, maxLength, toNumber) => {\n  if (maxLength > 0) {\n    let dash = input[0] === '-' ? '-' : '';\n    if (dash) input = input.slice(1);\n    input = dash + input.padStart(dash ? maxLength - 1 : maxLength, '0');\n  }\n\n  if (toNumber === false) {\n    return String(input);\n  }\n\n  return input;\n};\n\nconst toMaxLen = (input, maxLength) => {\n  let negative = input[0] === '-' ? '-' : '';\n\n  if (negative) {\n    input = input.slice(1);\n    maxLength--;\n  }\n\n  while (input.length < maxLength) input = '0' + input;\n\n  return negative ? '-' + input : input;\n};\n\nconst toSequence = (parts, options) => {\n  parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);\n  parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);\n  let prefix = options.capture ? '' : '?:';\n  let positives = '';\n  let negatives = '';\n  let result;\n\n  if (parts.positives.length) {\n    positives = parts.positives.join('|');\n  }\n\n  if (parts.negatives.length) {\n    negatives = `-(${prefix}${parts.negatives.join('|')})`;\n  }\n\n  if (positives && negatives) {\n    result = `${positives}|${negatives}`;\n  } else {\n    result = positives || negatives;\n  }\n\n  if (options.wrap) {\n    return `(${prefix}${result})`;\n  }\n\n  return result;\n};\n\nconst toRange = (a, b, isNumbers, options) => {\n  if (isNumbers) {\n    return toRegexRange(a, b, {\n      wrap: false,\n      ...options\n    });\n  }\n\n  let start = String.fromCharCode(a);\n  if (a === b) return start;\n  let stop = String.fromCharCode(b);\n  return `[${start}-${stop}]`;\n};\n\nconst toRegex = (start, end, options) => {\n  if (Array.isArray(start)) {\n    let wrap = options.wrap === true;\n    let prefix = options.capture ? '' : '?:';\n    return wrap ? `(${prefix}${start.join('|')})` : start.join('|');\n  }\n\n  return toRegexRange(start, end, options);\n};\n\nconst rangeError = (...args) => {\n  return new RangeError('Invalid range arguments: ' + util.inspect(...args));\n};\n\nconst invalidRange = (start, end, options) => {\n  if (options.strictRanges === true) throw rangeError([start, end]);\n  return [];\n};\n\nconst invalidStep = (step, options) => {\n  if (options.strictRanges === true) {\n    throw new TypeError(`Expected step \"${step}\" to be a number`);\n  }\n\n  return [];\n};\n\nconst fillNumbers = (start, end, step = 1, options = {}) => {\n  let a = Number(start);\n  let b = Number(end);\n\n  if (!Number.isInteger(a) || !Number.isInteger(b)) {\n    if (options.strictRanges === true) throw rangeError([start, end]);\n    return [];\n  } // fix negative zero\n\n\n  if (a === 0) a = 0;\n  if (b === 0) b = 0;\n  let descending = a > b;\n  let startString = String(start);\n  let endString = String(end);\n  let stepString = String(step);\n  step = Math.max(Math.abs(step), 1);\n  let padded = zeros(startString) || zeros(endString) || zeros(stepString);\n  let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;\n  let toNumber = padded === false && stringify(start, end, options) === false;\n  let format = options.transform || transform(toNumber);\n\n  if (options.toRegex && step === 1) {\n    return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);\n  }\n\n  let parts = {\n    negatives: [],\n    positives: []\n  };\n\n  let push = num => parts[num < 0 ? 'negatives' : 'positives'].push(Math.abs(num));\n\n  let range = [];\n  let index = 0;\n\n  while (descending ? a >= b : a <= b) {\n    if (options.toRegex === true && step > 1) {\n      push(a);\n    } else {\n      range.push(pad(format(a, index), maxLen, toNumber));\n    }\n\n    a = descending ? a - step : a + step;\n    index++;\n  }\n\n  if (options.toRegex === true) {\n    return step > 1 ? toSequence(parts, options) : toRegex(range, null, {\n      wrap: false,\n      ...options\n    });\n  }\n\n  return range;\n};\n\nconst fillLetters = (start, end, step = 1, options = {}) => {\n  if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) {\n    return invalidRange(start, end, options);\n  }\n\n  let format = options.transform || (val => String.fromCharCode(val));\n\n  let a = `${start}`.charCodeAt(0);\n  let b = `${end}`.charCodeAt(0);\n  let descending = a > b;\n  let min = Math.min(a, b);\n  let max = Math.max(a, b);\n\n  if (options.toRegex && step === 1) {\n    return toRange(min, max, false, options);\n  }\n\n  let range = [];\n  let index = 0;\n\n  while (descending ? a >= b : a <= b) {\n    range.push(format(a, index));\n    a = descending ? a - step : a + step;\n    index++;\n  }\n\n  if (options.toRegex === true) {\n    return toRegex(range, null, {\n      wrap: false,\n      options\n    });\n  }\n\n  return range;\n};\n\nconst fill = (start, end, step, options = {}) => {\n  if (end == null && isValidValue(start)) {\n    return [start];\n  }\n\n  if (!isValidValue(start) || !isValidValue(end)) {\n    return invalidRange(start, end, options);\n  }\n\n  if (typeof step === 'function') {\n    return fill(start, end, 1, {\n      transform: step\n    });\n  }\n\n  if (isObject(step)) {\n    return fill(start, end, 0, step);\n  }\n\n  let opts = { ...options\n  };\n  if (opts.capture === true) opts.wrap = true;\n  step = step || opts.step || 1;\n\n  if (!isNumber(step)) {\n    if (step != null && !isObject(step)) return invalidStep(step, opts);\n    return fill(start, end, 1, step);\n  }\n\n  if (isNumber(start) && isNumber(end)) {\n    return fillNumbers(start, end, step, opts);\n  }\n\n  return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);\n};\n\nmodule.exports = fill;","'use strict';\n\nvar isGlob = require('is-glob');\n\nvar pathPosixDirname = require('path').posix.dirname;\n\nvar isWin32 = require('os').platform() === 'win32';\nvar slash = '/';\nvar backslash = /\\\\/g;\nvar enclosure = /[\\{\\[].*[\\}\\]]$/;\nvar globby = /(^|[^\\\\])([\\{\\[]|\\([^\\)]+$)/;\nvar escaped = /\\\\([\\!\\*\\?\\|\\[\\]\\(\\)\\{\\}])/g;\n/**\n * @param {string} str\n * @param {Object} opts\n * @param {boolean} [opts.flipBackslashes=true]\n * @returns {string}\n */\n\nmodule.exports = function globParent(str, opts) {\n  var options = Object.assign({\n    flipBackslashes: true\n  }, opts); // flip windows path separators\n\n  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {\n    str = str.replace(backslash, slash);\n  } // special case for strings ending in enclosure containing path separator\n\n\n  if (enclosure.test(str)) {\n    str += slash;\n  } // preserves full path in case of trailing path separator\n\n\n  str += 'a'; // remove path parts that are globby\n\n  do {\n    str = pathPosixDirname(str);\n  } while (isGlob(str) || globby.test(str)); // remove escape chars and return result\n\n\n  return str.replace(escaped, '$1');\n};","/*!\n * is-extglob <https://github.com/jonschlinkert/is-extglob>\n *\n * Copyright (c) 2014-2016, Jon Schlinkert.\n * Licensed under the MIT License.\n */\nmodule.exports = function isExtglob(str) {\n  if (typeof str !== 'string' || str === '') {\n    return false;\n  }\n\n  var match;\n\n  while (match = /(\\\\).|([@?!+*]\\(.*\\))/g.exec(str)) {\n    if (match[2]) return true;\n    str = str.slice(match.index + match[0].length);\n  }\n\n  return false;\n};","/*!\n * is-glob <https://github.com/jonschlinkert/is-glob>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\nvar isExtglob = require('is-extglob');\n\nvar chars = {\n  '{': '}',\n  '(': ')',\n  '[': ']'\n};\n\nvar strictCheck = function (str) {\n  if (str[0] === '!') {\n    return true;\n  }\n\n  var index = 0;\n  var pipeIndex = -2;\n  var closeSquareIndex = -2;\n  var closeCurlyIndex = -2;\n  var closeParenIndex = -2;\n  var backSlashIndex = -2;\n\n  while (index < str.length) {\n    if (str[index] === '*') {\n      return true;\n    }\n\n    if (str[index + 1] === '?' && /[\\].+)]/.test(str[index])) {\n      return true;\n    }\n\n    if (closeSquareIndex !== -1 && str[index] === '[' && str[index + 1] !== ']') {\n      if (closeSquareIndex < index) {\n        closeSquareIndex = str.indexOf(']', index);\n      }\n\n      if (closeSquareIndex > index) {\n        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {\n          return true;\n        }\n\n        backSlashIndex = str.indexOf('\\\\', index);\n\n        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {\n          return true;\n        }\n      }\n    }\n\n    if (closeCurlyIndex !== -1 && str[index] === '{' && str[index + 1] !== '}') {\n      closeCurlyIndex = str.indexOf('}', index);\n\n      if (closeCurlyIndex > index) {\n        backSlashIndex = str.indexOf('\\\\', index);\n\n        if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {\n          return true;\n        }\n      }\n    }\n\n    if (closeParenIndex !== -1 && str[index] === '(' && str[index + 1] === '?' && /[:!=]/.test(str[index + 2]) && str[index + 3] !== ')') {\n      closeParenIndex = str.indexOf(')', index);\n\n      if (closeParenIndex > index) {\n        backSlashIndex = str.indexOf('\\\\', index);\n\n        if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {\n          return true;\n        }\n      }\n    }\n\n    if (pipeIndex !== -1 && str[index] === '(' && str[index + 1] !== '|') {\n      if (pipeIndex < index) {\n        pipeIndex = str.indexOf('|', index);\n      }\n\n      if (pipeIndex !== -1 && str[pipeIndex + 1] !== ')') {\n        closeParenIndex = str.indexOf(')', pipeIndex);\n\n        if (closeParenIndex > pipeIndex) {\n          backSlashIndex = str.indexOf('\\\\', pipeIndex);\n\n          if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {\n            return true;\n          }\n        }\n      }\n    }\n\n    if (str[index] === '\\\\') {\n      var open = str[index + 1];\n      index += 2;\n      var close = chars[open];\n\n      if (close) {\n        var n = str.indexOf(close, index);\n\n        if (n !== -1) {\n          index = n + 1;\n        }\n      }\n\n      if (str[index] === '!') {\n        return true;\n      }\n    } else {\n      index++;\n    }\n  }\n\n  return false;\n};\n\nvar relaxedCheck = function (str) {\n  if (str[0] === '!') {\n    return true;\n  }\n\n  var index = 0;\n\n  while (index < str.length) {\n    if (/[*?{}()[\\]]/.test(str[index])) {\n      return true;\n    }\n\n    if (str[index] === '\\\\') {\n      var open = str[index + 1];\n      index += 2;\n      var close = chars[open];\n\n      if (close) {\n        var n = str.indexOf(close, index);\n\n        if (n !== -1) {\n          index = n + 1;\n        }\n      }\n\n      if (str[index] === '!') {\n        return true;\n      }\n    } else {\n      index++;\n    }\n  }\n\n  return false;\n};\n\nmodule.exports = function isGlob(str, options) {\n  if (typeof str !== 'string' || str === '') {\n    return false;\n  }\n\n  if (isExtglob(str)) {\n    return true;\n  }\n\n  var check = strictCheck; // optionally relax check\n\n  if (options && options.strict === false) {\n    check = relaxedCheck;\n  }\n\n  return check(str);\n};","/*!\n * is-number <https://github.com/jonschlinkert/is-number>\n *\n * Copyright (c) 2014-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n'use strict';\n\nmodule.exports = function (num) {\n  if (typeof num === 'number') {\n    return num - num === 0;\n  }\n\n  if (typeof num === 'string' && num.trim() !== '') {\n    return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);\n  }\n\n  return false;\n};","'use strict';\n/*\n * merge2\n * https://github.com/teambition/merge2\n *\n * Copyright (c) 2014-2020 Teambition\n * Licensed under the MIT license.\n */\n\nconst Stream = require('stream');\n\nconst PassThrough = Stream.PassThrough;\nconst slice = Array.prototype.slice;\nmodule.exports = merge2;\n\nfunction merge2() {\n  const streamsQueue = [];\n  const args = slice.call(arguments);\n  let merging = false;\n  let options = args[args.length - 1];\n\n  if (options && !Array.isArray(options) && options.pipe == null) {\n    args.pop();\n  } else {\n    options = {};\n  }\n\n  const doEnd = options.end !== false;\n  const doPipeError = options.pipeError === true;\n\n  if (options.objectMode == null) {\n    options.objectMode = true;\n  }\n\n  if (options.highWaterMark == null) {\n    options.highWaterMark = 64 * 1024;\n  }\n\n  const mergedStream = PassThrough(options);\n\n  function addStream() {\n    for (let i = 0, len = arguments.length; i < len; i++) {\n      streamsQueue.push(pauseStreams(arguments[i], options));\n    }\n\n    mergeStream();\n    return this;\n  }\n\n  function mergeStream() {\n    if (merging) {\n      return;\n    }\n\n    merging = true;\n    let streams = streamsQueue.shift();\n\n    if (!streams) {\n      process.nextTick(endStream);\n      return;\n    }\n\n    if (!Array.isArray(streams)) {\n      streams = [streams];\n    }\n\n    let pipesCount = streams.length + 1;\n\n    function next() {\n      if (--pipesCount > 0) {\n        return;\n      }\n\n      merging = false;\n      mergeStream();\n    }\n\n    function pipe(stream) {\n      function onend() {\n        stream.removeListener('merge2UnpipeEnd', onend);\n        stream.removeListener('end', onend);\n\n        if (doPipeError) {\n          stream.removeListener('error', onerror);\n        }\n\n        next();\n      }\n\n      function onerror(err) {\n        mergedStream.emit('error', err);\n      } // skip ended stream\n\n\n      if (stream._readableState.endEmitted) {\n        return next();\n      }\n\n      stream.on('merge2UnpipeEnd', onend);\n      stream.on('end', onend);\n\n      if (doPipeError) {\n        stream.on('error', onerror);\n      }\n\n      stream.pipe(mergedStream, {\n        end: false\n      }); // compatible for old stream\n\n      stream.resume();\n    }\n\n    for (let i = 0; i < streams.length; i++) {\n      pipe(streams[i]);\n    }\n\n    next();\n  }\n\n  function endStream() {\n    merging = false; // emit 'queueDrain' when all streams merged.\n\n    mergedStream.emit('queueDrain');\n\n    if (doEnd) {\n      mergedStream.end();\n    }\n  }\n\n  mergedStream.setMaxListeners(0);\n  mergedStream.add = addStream;\n  mergedStream.on('unpipe', function (stream) {\n    stream.emit('merge2UnpipeEnd');\n  });\n\n  if (args.length) {\n    addStream.apply(null, args);\n  }\n\n  return mergedStream;\n} // check and pause streams for pipe.\n\n\nfunction pauseStreams(streams, options) {\n  if (!Array.isArray(streams)) {\n    // Backwards-compat with old-style streams\n    if (!streams._readableState && streams.pipe) {\n      streams = streams.pipe(PassThrough(options));\n    }\n\n    if (!streams._readableState || !streams.pause || !streams.pipe) {\n      throw new Error('Only readable stream can be merged.');\n    }\n\n    streams.pause();\n  } else {\n    for (let i = 0, len = streams.length; i < len; i++) {\n      streams[i] = pauseStreams(streams[i], options);\n    }\n  }\n\n  return streams;\n}","'use strict';\n\nconst util = require('util');\n\nconst braces = require('braces');\n\nconst picomatch = require('picomatch');\n\nconst utils = require('picomatch/lib/utils');\n\nconst isEmptyString = val => val === '' || val === './';\n/**\n * Returns an array of strings that match one or more glob patterns.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm(list, patterns[, options]);\n *\n * console.log(mm(['a.js', 'a.txt'], ['*.js']));\n * //=> [ 'a.js' ]\n * ```\n * @param {String|Array<string>} `list` List of strings to match.\n * @param {String|Array<string>} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options)\n * @return {Array} Returns an array of matches\n * @summary false\n * @api public\n */\n\n\nconst micromatch = (list, patterns, options) => {\n  patterns = [].concat(patterns);\n  list = [].concat(list);\n  let omit = new Set();\n  let keep = new Set();\n  let items = new Set();\n  let negatives = 0;\n\n  let onResult = state => {\n    items.add(state.output);\n\n    if (options && options.onResult) {\n      options.onResult(state);\n    }\n  };\n\n  for (let i = 0; i < patterns.length; i++) {\n    let isMatch = picomatch(String(patterns[i]), { ...options,\n      onResult\n    }, true);\n    let negated = isMatch.state.negated || isMatch.state.negatedExtglob;\n    if (negated) negatives++;\n\n    for (let item of list) {\n      let matched = isMatch(item, true);\n      let match = negated ? !matched.isMatch : matched.isMatch;\n      if (!match) continue;\n\n      if (negated) {\n        omit.add(matched.output);\n      } else {\n        omit.delete(matched.output);\n        keep.add(matched.output);\n      }\n    }\n  }\n\n  let result = negatives === patterns.length ? [...items] : [...keep];\n  let matches = result.filter(item => !omit.has(item));\n\n  if (options && matches.length === 0) {\n    if (options.failglob === true) {\n      throw new Error(`No matches found for \"${patterns.join(', ')}\"`);\n    }\n\n    if (options.nonull === true || options.nullglob === true) {\n      return options.unescape ? patterns.map(p => p.replace(/\\\\/g, '')) : patterns;\n    }\n  }\n\n  return matches;\n};\n/**\n * Backwards compatibility\n */\n\n\nmicromatch.match = micromatch;\n/**\n * Returns a matcher function from the given glob `pattern` and `options`.\n * The returned function takes a string to match as its only argument and returns\n * true if the string is a match.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.matcher(pattern[, options]);\n *\n * const isMatch = mm.matcher('*.!(*a)');\n * console.log(isMatch('a.a')); //=> false\n * console.log(isMatch('a.b')); //=> true\n * ```\n * @param {String} `pattern` Glob pattern\n * @param {Object} `options`\n * @return {Function} Returns a matcher function.\n * @api public\n */\n\nmicromatch.matcher = (pattern, options) => picomatch(pattern, options);\n/**\n * Returns true if **any** of the given glob `patterns` match the specified `string`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.isMatch(string, patterns[, options]);\n *\n * console.log(mm.isMatch('a.a', ['b.*', '*.a'])); //=> true\n * console.log(mm.isMatch('a.a', 'b.*')); //=> false\n * ```\n * @param {String} `str` The string to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `[options]` See available [options](#options).\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\n\nmicromatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);\n/**\n * Backwards compatibility\n */\n\n\nmicromatch.any = micromatch.isMatch;\n/**\n * Returns a list of strings that _**do not match any**_ of the given `patterns`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.not(list, patterns[, options]);\n *\n * console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));\n * //=> ['b.b', 'c.c']\n * ```\n * @param {Array} `list` Array of strings to match.\n * @param {String|Array} `patterns` One or more glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Array} Returns an array of strings that **do not match** the given patterns.\n * @api public\n */\n\nmicromatch.not = (list, patterns, options = {}) => {\n  patterns = [].concat(patterns).map(String);\n  let result = new Set();\n  let items = [];\n\n  let onResult = state => {\n    if (options.onResult) options.onResult(state);\n    items.push(state.output);\n  };\n\n  let matches = new Set(micromatch(list, patterns, { ...options,\n    onResult\n  }));\n\n  for (let item of items) {\n    if (!matches.has(item)) {\n      result.add(item);\n    }\n  }\n\n  return [...result];\n};\n/**\n * Returns true if the given `string` contains the given pattern. Similar\n * to [.isMatch](#isMatch) but the pattern can match any part of the string.\n *\n * ```js\n * var mm = require('micromatch');\n * // mm.contains(string, pattern[, options]);\n *\n * console.log(mm.contains('aa/bb/cc', '*b'));\n * //=> true\n * console.log(mm.contains('aa/bb/cc', '*d'));\n * //=> false\n * ```\n * @param {String} `str` The string to match.\n * @param {String|Array} `patterns` Glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any of the patterns matches any part of `str`.\n * @api public\n */\n\n\nmicromatch.contains = (str, pattern, options) => {\n  if (typeof str !== 'string') {\n    throw new TypeError(`Expected a string: \"${util.inspect(str)}\"`);\n  }\n\n  if (Array.isArray(pattern)) {\n    return pattern.some(p => micromatch.contains(str, p, options));\n  }\n\n  if (typeof pattern === 'string') {\n    if (isEmptyString(str) || isEmptyString(pattern)) {\n      return false;\n    }\n\n    if (str.includes(pattern) || str.startsWith('./') && str.slice(2).includes(pattern)) {\n      return true;\n    }\n  }\n\n  return micromatch.isMatch(str, pattern, { ...options,\n    contains: true\n  });\n};\n/**\n * Filter the keys of the given object with the given `glob` pattern\n * and `options`. Does not attempt to match nested keys. If you need this feature,\n * use [glob-object][] instead.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.matchKeys(object, patterns[, options]);\n *\n * const obj = { aa: 'a', ab: 'b', ac: 'c' };\n * console.log(mm.matchKeys(obj, '*b'));\n * //=> { ab: 'b' }\n * ```\n * @param {Object} `object` The object with keys to filter.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Object} Returns an object with only keys that match the given patterns.\n * @api public\n */\n\n\nmicromatch.matchKeys = (obj, patterns, options) => {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('Expected the first argument to be an object');\n  }\n\n  let keys = micromatch(Object.keys(obj), patterns, options);\n  let res = {};\n\n  for (let key of keys) res[key] = obj[key];\n\n  return res;\n};\n/**\n * Returns true if some of the strings in the given `list` match any of the given glob `patterns`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.some(list, patterns[, options]);\n *\n * console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n * // true\n * console.log(mm.some(['foo.js'], ['*.js', '!foo.js']));\n * // false\n * ```\n * @param {String|Array} `list` The string or array of strings to test. Returns as soon as the first match is found.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any `patterns` matches any of the strings in `list`\n * @api public\n */\n\n\nmicromatch.some = (list, patterns, options) => {\n  let items = [].concat(list);\n\n  for (let pattern of [].concat(patterns)) {\n    let isMatch = picomatch(String(pattern), options);\n\n    if (items.some(item => isMatch(item))) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Returns true if every string in the given `list` matches\n * any of the given glob `patterns`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.every(list, patterns[, options]);\n *\n * console.log(mm.every('foo.js', ['foo.js']));\n * // true\n * console.log(mm.every(['foo.js', 'bar.js'], ['*.js']));\n * // true\n * console.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n * // false\n * console.log(mm.every(['foo.js'], ['*.js', '!foo.js']));\n * // false\n * ```\n * @param {String|Array} `list` The string or array of strings to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if all `patterns` matches all of the strings in `list`\n * @api public\n */\n\n\nmicromatch.every = (list, patterns, options) => {\n  let items = [].concat(list);\n\n  for (let pattern of [].concat(patterns)) {\n    let isMatch = picomatch(String(pattern), options);\n\n    if (!items.every(item => isMatch(item))) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Returns true if **all** of the given `patterns` match\n * the specified string.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.all(string, patterns[, options]);\n *\n * console.log(mm.all('foo.js', ['foo.js']));\n * // true\n *\n * console.log(mm.all('foo.js', ['*.js', '!foo.js']));\n * // false\n *\n * console.log(mm.all('foo.js', ['*.js', 'foo.js']));\n * // true\n *\n * console.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));\n * // true\n * ```\n * @param {String|Array} `str` The string to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\n\nmicromatch.all = (str, patterns, options) => {\n  if (typeof str !== 'string') {\n    throw new TypeError(`Expected a string: \"${util.inspect(str)}\"`);\n  }\n\n  return [].concat(patterns).every(p => picomatch(p, options)(str));\n};\n/**\n * Returns an array of matches captured by `pattern` in `string, or `null` if the pattern did not match.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.capture(pattern, string[, options]);\n *\n * console.log(mm.capture('test/*.js', 'test/foo.js'));\n * //=> ['foo']\n * console.log(mm.capture('test/*.js', 'foo/bar.css'));\n * //=> null\n * ```\n * @param {String} `glob` Glob pattern to use for matching.\n * @param {String} `input` String to match\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Array|null} Returns an array of captures if the input matches the glob pattern, otherwise `null`.\n * @api public\n */\n\n\nmicromatch.capture = (glob, input, options) => {\n  let posix = utils.isWindows(options);\n  let regex = picomatch.makeRe(String(glob), { ...options,\n    capture: true\n  });\n  let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);\n\n  if (match) {\n    return match.slice(1).map(v => v === void 0 ? '' : v);\n  }\n};\n/**\n * Create a regular expression from the given glob `pattern`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.makeRe(pattern[, options]);\n *\n * console.log(mm.makeRe('*.js'));\n * //=> /^(?:(\\.[\\\\\\/])?(?!\\.)(?=.)[^\\/]*?\\.js)$/\n * ```\n * @param {String} `pattern` A glob pattern to convert to regex.\n * @param {Object} `options`\n * @return {RegExp} Returns a regex created from the given pattern.\n * @api public\n */\n\n\nmicromatch.makeRe = (...args) => picomatch.makeRe(...args);\n/**\n * Scan a glob pattern to separate the pattern into segments. Used\n * by the [split](#split) method.\n *\n * ```js\n * const mm = require('micromatch');\n * const state = mm.scan(pattern[, options]);\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object} Returns an object with\n * @api public\n */\n\n\nmicromatch.scan = (...args) => picomatch.scan(...args);\n/**\n * Parse a glob pattern to create the source string for a regular\n * expression.\n *\n * ```js\n * const mm = require('micromatch');\n * const state = mm.parse(pattern[, options]);\n * ```\n * @param {String} `glob`\n * @param {Object} `options`\n * @return {Object} Returns an object with useful properties and output to be used as regex source string.\n * @api public\n */\n\n\nmicromatch.parse = (patterns, options) => {\n  let res = [];\n\n  for (let pattern of [].concat(patterns || [])) {\n    for (let str of braces(String(pattern), options)) {\n      res.push(picomatch.parse(str, options));\n    }\n  }\n\n  return res;\n};\n/**\n * Process the given brace `pattern`.\n *\n * ```js\n * const { braces } = require('micromatch');\n * console.log(braces('foo/{a,b,c}/bar'));\n * //=> [ 'foo/(a|b|c)/bar' ]\n *\n * console.log(braces('foo/{a,b,c}/bar', { expand: true }));\n * //=> [ 'foo/a/bar', 'foo/b/bar', 'foo/c/bar' ]\n * ```\n * @param {String} `pattern` String with brace pattern to process.\n * @param {Object} `options` Any [options](#options) to change how expansion is performed. See the [braces][] library for all available options.\n * @return {Array}\n * @api public\n */\n\n\nmicromatch.braces = (pattern, options) => {\n  if (typeof pattern !== 'string') throw new TypeError('Expected a string');\n\n  if (options && options.nobrace === true || !/\\{.*\\}/.test(pattern)) {\n    return [pattern];\n  }\n\n  return braces(pattern, options);\n};\n/**\n * Expand braces\n */\n\n\nmicromatch.braceExpand = (pattern, options) => {\n  if (typeof pattern !== 'string') throw new TypeError('Expected a string');\n  return micromatch.braces(pattern, { ...options,\n    expand: true\n  });\n};\n/**\n * Expose micromatch\n */\n\n\nmodule.exports = micromatch;","'use strict';\n\nmodule.exports = require('./lib/picomatch');","'use strict';\n\nconst path = require('path');\n\nconst WIN_SLASH = '\\\\\\\\/';\nconst WIN_NO_SLASH = `[^${WIN_SLASH}]`;\n/**\n * Posix glob regex\n */\n\nconst DOT_LITERAL = '\\\\.';\nconst PLUS_LITERAL = '\\\\+';\nconst QMARK_LITERAL = '\\\\?';\nconst SLASH_LITERAL = '\\\\/';\nconst ONE_CHAR = '(?=.)';\nconst QMARK = '[^/]';\nconst END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;\nconst START_ANCHOR = `(?:^|${SLASH_LITERAL})`;\nconst DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;\nconst NO_DOT = `(?!${DOT_LITERAL})`;\nconst NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;\nconst NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;\nconst NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;\nconst QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;\nconst STAR = `${QMARK}*?`;\nconst POSIX_CHARS = {\n  DOT_LITERAL,\n  PLUS_LITERAL,\n  QMARK_LITERAL,\n  SLASH_LITERAL,\n  ONE_CHAR,\n  QMARK,\n  END_ANCHOR,\n  DOTS_SLASH,\n  NO_DOT,\n  NO_DOTS,\n  NO_DOT_SLASH,\n  NO_DOTS_SLASH,\n  QMARK_NO_DOT,\n  STAR,\n  START_ANCHOR\n};\n/**\n * Windows glob regex\n */\n\nconst WINDOWS_CHARS = { ...POSIX_CHARS,\n  SLASH_LITERAL: `[${WIN_SLASH}]`,\n  QMARK: WIN_NO_SLASH,\n  STAR: `${WIN_NO_SLASH}*?`,\n  DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,\n  NO_DOT: `(?!${DOT_LITERAL})`,\n  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,\n  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,\n  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,\n  QMARK_NO_DOT: `[^.${WIN_SLASH}]`,\n  START_ANCHOR: `(?:^|[${WIN_SLASH}])`,\n  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`\n};\n/**\n * POSIX Bracket Regex\n */\n\nconst POSIX_REGEX_SOURCE = {\n  alnum: 'a-zA-Z0-9',\n  alpha: 'a-zA-Z',\n  ascii: '\\\\x00-\\\\x7F',\n  blank: ' \\\\t',\n  cntrl: '\\\\x00-\\\\x1F\\\\x7F',\n  digit: '0-9',\n  graph: '\\\\x21-\\\\x7E',\n  lower: 'a-z',\n  print: '\\\\x20-\\\\x7E ',\n  punct: '\\\\-!\"#$%&\\'()\\\\*+,./:;<=>?@[\\\\]^_`{|}~',\n  space: ' \\\\t\\\\r\\\\n\\\\v\\\\f',\n  upper: 'A-Z',\n  word: 'A-Za-z0-9_',\n  xdigit: 'A-Fa-f0-9'\n};\nmodule.exports = {\n  MAX_LENGTH: 1024 * 64,\n  POSIX_REGEX_SOURCE,\n  // regular expressions\n  REGEX_BACKSLASH: /\\\\(?![*+?^${}(|)[\\]])/g,\n  REGEX_NON_SPECIAL_CHARS: /^[^@![\\].,$*+?^{}()|\\\\/]+/,\n  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\\]]/,\n  REGEX_SPECIAL_CHARS_BACKREF: /(\\\\?)((\\W)(\\3*))/g,\n  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\\]])/g,\n  REGEX_REMOVE_BACKSLASH: /(?:\\[.*?[^\\\\]\\]|\\\\(?=.))/g,\n  // Replace globs with equivalent patterns to reduce parsing time.\n  REPLACEMENTS: {\n    '***': '*',\n    '**/**': '**',\n    '**/**/**': '**'\n  },\n  // Digits\n  CHAR_0: 48,\n\n  /* 0 */\n  CHAR_9: 57,\n\n  /* 9 */\n  // Alphabet chars.\n  CHAR_UPPERCASE_A: 65,\n\n  /* A */\n  CHAR_LOWERCASE_A: 97,\n\n  /* a */\n  CHAR_UPPERCASE_Z: 90,\n\n  /* Z */\n  CHAR_LOWERCASE_Z: 122,\n\n  /* z */\n  CHAR_LEFT_PARENTHESES: 40,\n\n  /* ( */\n  CHAR_RIGHT_PARENTHESES: 41,\n\n  /* ) */\n  CHAR_ASTERISK: 42,\n\n  /* * */\n  // Non-alphabetic chars.\n  CHAR_AMPERSAND: 38,\n\n  /* & */\n  CHAR_AT: 64,\n\n  /* @ */\n  CHAR_BACKWARD_SLASH: 92,\n\n  /* \\ */\n  CHAR_CARRIAGE_RETURN: 13,\n\n  /* \\r */\n  CHAR_CIRCUMFLEX_ACCENT: 94,\n\n  /* ^ */\n  CHAR_COLON: 58,\n\n  /* : */\n  CHAR_COMMA: 44,\n\n  /* , */\n  CHAR_DOT: 46,\n\n  /* . */\n  CHAR_DOUBLE_QUOTE: 34,\n\n  /* \" */\n  CHAR_EQUAL: 61,\n\n  /* = */\n  CHAR_EXCLAMATION_MARK: 33,\n\n  /* ! */\n  CHAR_FORM_FEED: 12,\n\n  /* \\f */\n  CHAR_FORWARD_SLASH: 47,\n\n  /* / */\n  CHAR_GRAVE_ACCENT: 96,\n\n  /* ` */\n  CHAR_HASH: 35,\n\n  /* # */\n  CHAR_HYPHEN_MINUS: 45,\n\n  /* - */\n  CHAR_LEFT_ANGLE_BRACKET: 60,\n\n  /* < */\n  CHAR_LEFT_CURLY_BRACE: 123,\n\n  /* { */\n  CHAR_LEFT_SQUARE_BRACKET: 91,\n\n  /* [ */\n  CHAR_LINE_FEED: 10,\n\n  /* \\n */\n  CHAR_NO_BREAK_SPACE: 160,\n\n  /* \\u00A0 */\n  CHAR_PERCENT: 37,\n\n  /* % */\n  CHAR_PLUS: 43,\n\n  /* + */\n  CHAR_QUESTION_MARK: 63,\n\n  /* ? */\n  CHAR_RIGHT_ANGLE_BRACKET: 62,\n\n  /* > */\n  CHAR_RIGHT_CURLY_BRACE: 125,\n\n  /* } */\n  CHAR_RIGHT_SQUARE_BRACKET: 93,\n\n  /* ] */\n  CHAR_SEMICOLON: 59,\n\n  /* ; */\n  CHAR_SINGLE_QUOTE: 39,\n\n  /* ' */\n  CHAR_SPACE: 32,\n\n  /*   */\n  CHAR_TAB: 9,\n\n  /* \\t */\n  CHAR_UNDERSCORE: 95,\n\n  /* _ */\n  CHAR_VERTICAL_LINE: 124,\n\n  /* | */\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,\n\n  /* \\uFEFF */\n  SEP: path.sep,\n\n  /**\n   * Create EXTGLOB_CHARS\n   */\n  extglobChars(chars) {\n    return {\n      '!': {\n        type: 'negate',\n        open: '(?:(?!(?:',\n        close: `))${chars.STAR})`\n      },\n      '?': {\n        type: 'qmark',\n        open: '(?:',\n        close: ')?'\n      },\n      '+': {\n        type: 'plus',\n        open: '(?:',\n        close: ')+'\n      },\n      '*': {\n        type: 'star',\n        open: '(?:',\n        close: ')*'\n      },\n      '@': {\n        type: 'at',\n        open: '(?:',\n        close: ')'\n      }\n    };\n  },\n\n  /**\n   * Create GLOB_CHARS\n   */\n  globChars(win32) {\n    return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;\n  }\n\n};","'use strict';\n\nconst constants = require('./constants');\n\nconst utils = require('./utils');\n/**\n * Constants\n */\n\n\nconst {\n  MAX_LENGTH,\n  POSIX_REGEX_SOURCE,\n  REGEX_NON_SPECIAL_CHARS,\n  REGEX_SPECIAL_CHARS_BACKREF,\n  REPLACEMENTS\n} = constants;\n/**\n * Helpers\n */\n\nconst expandRange = (args, options) => {\n  if (typeof options.expandRange === 'function') {\n    return options.expandRange(...args, options);\n  }\n\n  args.sort();\n  const value = `[${args.join('-')}]`;\n\n  try {\n    /* eslint-disable-next-line no-new */\n    new RegExp(value);\n  } catch (ex) {\n    return args.map(v => utils.escapeRegex(v)).join('..');\n  }\n\n  return value;\n};\n/**\n * Create the message for a syntax error\n */\n\n\nconst syntaxError = (type, char) => {\n  return `Missing ${type}: \"${char}\" - use \"\\\\\\\\${char}\" to match literal characters`;\n};\n/**\n * Parse the given input string.\n * @param {String} input\n * @param {Object} options\n * @return {Object}\n */\n\n\nconst parse = (input, options) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  input = REPLACEMENTS[input] || input;\n  const opts = { ...options\n  };\n  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n  let len = input.length;\n\n  if (len > max) {\n    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);\n  }\n\n  const bos = {\n    type: 'bos',\n    value: '',\n    output: opts.prepend || ''\n  };\n  const tokens = [bos];\n  const capture = opts.capture ? '' : '?:';\n  const win32 = utils.isWindows(options); // create constants based on platform, for windows or posix\n\n  const PLATFORM_CHARS = constants.globChars(win32);\n  const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);\n  const {\n    DOT_LITERAL,\n    PLUS_LITERAL,\n    SLASH_LITERAL,\n    ONE_CHAR,\n    DOTS_SLASH,\n    NO_DOT,\n    NO_DOT_SLASH,\n    NO_DOTS_SLASH,\n    QMARK,\n    QMARK_NO_DOT,\n    STAR,\n    START_ANCHOR\n  } = PLATFORM_CHARS;\n\n  const globstar = opts => {\n    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;\n  };\n\n  const nodot = opts.dot ? '' : NO_DOT;\n  const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;\n  let star = opts.bash === true ? globstar(opts) : STAR;\n\n  if (opts.capture) {\n    star = `(${star})`;\n  } // minimatch options support\n\n\n  if (typeof opts.noext === 'boolean') {\n    opts.noextglob = opts.noext;\n  }\n\n  const state = {\n    input,\n    index: -1,\n    start: 0,\n    dot: opts.dot === true,\n    consumed: '',\n    output: '',\n    prefix: '',\n    backtrack: false,\n    negated: false,\n    brackets: 0,\n    braces: 0,\n    parens: 0,\n    quotes: 0,\n    globstar: false,\n    tokens\n  };\n  input = utils.removePrefix(input, state);\n  len = input.length;\n  const extglobs = [];\n  const braces = [];\n  const stack = [];\n  let prev = bos;\n  let value;\n  /**\n   * Tokenizing helpers\n   */\n\n  const eos = () => state.index === len - 1;\n\n  const peek = state.peek = (n = 1) => input[state.index + n];\n\n  const advance = state.advance = () => input[++state.index] || '';\n\n  const remaining = () => input.slice(state.index + 1);\n\n  const consume = (value = '', num = 0) => {\n    state.consumed += value;\n    state.index += num;\n  };\n\n  const append = token => {\n    state.output += token.output != null ? token.output : token.value;\n    consume(token.value);\n  };\n\n  const negate = () => {\n    let count = 1;\n\n    while (peek() === '!' && (peek(2) !== '(' || peek(3) === '?')) {\n      advance();\n      state.start++;\n      count++;\n    }\n\n    if (count % 2 === 0) {\n      return false;\n    }\n\n    state.negated = true;\n    state.start++;\n    return true;\n  };\n\n  const increment = type => {\n    state[type]++;\n    stack.push(type);\n  };\n\n  const decrement = type => {\n    state[type]--;\n    stack.pop();\n  };\n  /**\n   * Push tokens onto the tokens array. This helper speeds up\n   * tokenizing by 1) helping us avoid backtracking as much as possible,\n   * and 2) helping us avoid creating extra tokens when consecutive\n   * characters are plain text. This improves performance and simplifies\n   * lookbehinds.\n   */\n\n\n  const push = tok => {\n    if (prev.type === 'globstar') {\n      const isBrace = state.braces > 0 && (tok.type === 'comma' || tok.type === 'brace');\n      const isExtglob = tok.extglob === true || extglobs.length && (tok.type === 'pipe' || tok.type === 'paren');\n\n      if (tok.type !== 'slash' && tok.type !== 'paren' && !isBrace && !isExtglob) {\n        state.output = state.output.slice(0, -prev.output.length);\n        prev.type = 'star';\n        prev.value = '*';\n        prev.output = star;\n        state.output += prev.output;\n      }\n    }\n\n    if (extglobs.length && tok.type !== 'paren') {\n      extglobs[extglobs.length - 1].inner += tok.value;\n    }\n\n    if (tok.value || tok.output) append(tok);\n\n    if (prev && prev.type === 'text' && tok.type === 'text') {\n      prev.value += tok.value;\n      prev.output = (prev.output || '') + tok.value;\n      return;\n    }\n\n    tok.prev = prev;\n    tokens.push(tok);\n    prev = tok;\n  };\n\n  const extglobOpen = (type, value) => {\n    const token = { ...EXTGLOB_CHARS[value],\n      conditions: 1,\n      inner: ''\n    };\n    token.prev = prev;\n    token.parens = state.parens;\n    token.output = state.output;\n    const output = (opts.capture ? '(' : '') + token.open;\n    increment('parens');\n    push({\n      type,\n      value,\n      output: state.output ? '' : ONE_CHAR\n    });\n    push({\n      type: 'paren',\n      extglob: true,\n      value: advance(),\n      output\n    });\n    extglobs.push(token);\n  };\n\n  const extglobClose = token => {\n    let output = token.close + (opts.capture ? ')' : '');\n    let rest;\n\n    if (token.type === 'negate') {\n      let extglobStar = star;\n\n      if (token.inner && token.inner.length > 1 && token.inner.includes('/')) {\n        extglobStar = globstar(opts);\n      }\n\n      if (extglobStar !== star || eos() || /^\\)+$/.test(remaining())) {\n        output = token.close = `)$))${extglobStar}`;\n      }\n\n      if (token.inner.includes('*') && (rest = remaining()) && /^\\.[^\\\\/.]+$/.test(rest)) {\n        // Any non-magical string (`.ts`) or even nested expression (`.{ts,tsx}`) can follow after the closing parenthesis.\n        // In this case, we need to parse the string and use it in the output of the original pattern.\n        // Suitable patterns: `/!(*.d).ts`, `/!(*.d).{ts,tsx}`, `**/!(*-dbg).@(js)`.\n        //\n        // Disabling the `fastpaths` option due to a problem with parsing strings as `.ts` in the pattern like `**/!(*.d).ts`.\n        const expression = parse(rest, { ...options,\n          fastpaths: false\n        }).output;\n        output = token.close = `)${expression})${extglobStar})`;\n      }\n\n      if (token.prev.type === 'bos') {\n        state.negatedExtglob = true;\n      }\n    }\n\n    push({\n      type: 'paren',\n      extglob: true,\n      value,\n      output\n    });\n    decrement('parens');\n  };\n  /**\n   * Fast paths\n   */\n\n\n  if (opts.fastpaths !== false && !/(^[*!]|[/()[\\]{}\"])/.test(input)) {\n    let backslashes = false;\n    let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {\n      if (first === '\\\\') {\n        backslashes = true;\n        return m;\n      }\n\n      if (first === '?') {\n        if (esc) {\n          return esc + first + (rest ? QMARK.repeat(rest.length) : '');\n        }\n\n        if (index === 0) {\n          return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : '');\n        }\n\n        return QMARK.repeat(chars.length);\n      }\n\n      if (first === '.') {\n        return DOT_LITERAL.repeat(chars.length);\n      }\n\n      if (first === '*') {\n        if (esc) {\n          return esc + first + (rest ? star : '');\n        }\n\n        return star;\n      }\n\n      return esc ? m : `\\\\${m}`;\n    });\n\n    if (backslashes === true) {\n      if (opts.unescape === true) {\n        output = output.replace(/\\\\/g, '');\n      } else {\n        output = output.replace(/\\\\+/g, m => {\n          return m.length % 2 === 0 ? '\\\\\\\\' : m ? '\\\\' : '';\n        });\n      }\n    }\n\n    if (output === input && opts.contains === true) {\n      state.output = input;\n      return state;\n    }\n\n    state.output = utils.wrapOutput(output, state, options);\n    return state;\n  }\n  /**\n   * Tokenize input until we reach end-of-string\n   */\n\n\n  while (!eos()) {\n    value = advance();\n\n    if (value === '\\u0000') {\n      continue;\n    }\n    /**\n     * Escaped characters\n     */\n\n\n    if (value === '\\\\') {\n      const next = peek();\n\n      if (next === '/' && opts.bash !== true) {\n        continue;\n      }\n\n      if (next === '.' || next === ';') {\n        continue;\n      }\n\n      if (!next) {\n        value += '\\\\';\n        push({\n          type: 'text',\n          value\n        });\n        continue;\n      } // collapse slashes to reduce potential for exploits\n\n\n      const match = /^\\\\+/.exec(remaining());\n      let slashes = 0;\n\n      if (match && match[0].length > 2) {\n        slashes = match[0].length;\n        state.index += slashes;\n\n        if (slashes % 2 !== 0) {\n          value += '\\\\';\n        }\n      }\n\n      if (opts.unescape === true) {\n        value = advance();\n      } else {\n        value += advance();\n      }\n\n      if (state.brackets === 0) {\n        push({\n          type: 'text',\n          value\n        });\n        continue;\n      }\n    }\n    /**\n     * If we're inside a regex character class, continue\n     * until we reach the closing bracket.\n     */\n\n\n    if (state.brackets > 0 && (value !== ']' || prev.value === '[' || prev.value === '[^')) {\n      if (opts.posix !== false && value === ':') {\n        const inner = prev.value.slice(1);\n\n        if (inner.includes('[')) {\n          prev.posix = true;\n\n          if (inner.includes(':')) {\n            const idx = prev.value.lastIndexOf('[');\n            const pre = prev.value.slice(0, idx);\n            const rest = prev.value.slice(idx + 2);\n            const posix = POSIX_REGEX_SOURCE[rest];\n\n            if (posix) {\n              prev.value = pre + posix;\n              state.backtrack = true;\n              advance();\n\n              if (!bos.output && tokens.indexOf(prev) === 1) {\n                bos.output = ONE_CHAR;\n              }\n\n              continue;\n            }\n          }\n        }\n      }\n\n      if (value === '[' && peek() !== ':' || value === '-' && peek() === ']') {\n        value = `\\\\${value}`;\n      }\n\n      if (value === ']' && (prev.value === '[' || prev.value === '[^')) {\n        value = `\\\\${value}`;\n      }\n\n      if (opts.posix === true && value === '!' && prev.value === '[') {\n        value = '^';\n      }\n\n      prev.value += value;\n      append({\n        value\n      });\n      continue;\n    }\n    /**\n     * If we're inside a quoted string, continue\n     * until we reach the closing double quote.\n     */\n\n\n    if (state.quotes === 1 && value !== '\"') {\n      value = utils.escapeRegex(value);\n      prev.value += value;\n      append({\n        value\n      });\n      continue;\n    }\n    /**\n     * Double quotes\n     */\n\n\n    if (value === '\"') {\n      state.quotes = state.quotes === 1 ? 0 : 1;\n\n      if (opts.keepQuotes === true) {\n        push({\n          type: 'text',\n          value\n        });\n      }\n\n      continue;\n    }\n    /**\n     * Parentheses\n     */\n\n\n    if (value === '(') {\n      increment('parens');\n      push({\n        type: 'paren',\n        value\n      });\n      continue;\n    }\n\n    if (value === ')') {\n      if (state.parens === 0 && opts.strictBrackets === true) {\n        throw new SyntaxError(syntaxError('opening', '('));\n      }\n\n      const extglob = extglobs[extglobs.length - 1];\n\n      if (extglob && state.parens === extglob.parens + 1) {\n        extglobClose(extglobs.pop());\n        continue;\n      }\n\n      push({\n        type: 'paren',\n        value,\n        output: state.parens ? ')' : '\\\\)'\n      });\n      decrement('parens');\n      continue;\n    }\n    /**\n     * Square brackets\n     */\n\n\n    if (value === '[') {\n      if (opts.nobracket === true || !remaining().includes(']')) {\n        if (opts.nobracket !== true && opts.strictBrackets === true) {\n          throw new SyntaxError(syntaxError('closing', ']'));\n        }\n\n        value = `\\\\${value}`;\n      } else {\n        increment('brackets');\n      }\n\n      push({\n        type: 'bracket',\n        value\n      });\n      continue;\n    }\n\n    if (value === ']') {\n      if (opts.nobracket === true || prev && prev.type === 'bracket' && prev.value.length === 1) {\n        push({\n          type: 'text',\n          value,\n          output: `\\\\${value}`\n        });\n        continue;\n      }\n\n      if (state.brackets === 0) {\n        if (opts.strictBrackets === true) {\n          throw new SyntaxError(syntaxError('opening', '['));\n        }\n\n        push({\n          type: 'text',\n          value,\n          output: `\\\\${value}`\n        });\n        continue;\n      }\n\n      decrement('brackets');\n      const prevValue = prev.value.slice(1);\n\n      if (prev.posix !== true && prevValue[0] === '^' && !prevValue.includes('/')) {\n        value = `/${value}`;\n      }\n\n      prev.value += value;\n      append({\n        value\n      }); // when literal brackets are explicitly disabled\n      // assume we should match with a regex character class\n\n      if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {\n        continue;\n      }\n\n      const escaped = utils.escapeRegex(prev.value);\n      state.output = state.output.slice(0, -prev.value.length); // when literal brackets are explicitly enabled\n      // assume we should escape the brackets to match literal characters\n\n      if (opts.literalBrackets === true) {\n        state.output += escaped;\n        prev.value = escaped;\n        continue;\n      } // when the user specifies nothing, try to match both\n\n\n      prev.value = `(${capture}${escaped}|${prev.value})`;\n      state.output += prev.value;\n      continue;\n    }\n    /**\n     * Braces\n     */\n\n\n    if (value === '{' && opts.nobrace !== true) {\n      increment('braces');\n      const open = {\n        type: 'brace',\n        value,\n        output: '(',\n        outputIndex: state.output.length,\n        tokensIndex: state.tokens.length\n      };\n      braces.push(open);\n      push(open);\n      continue;\n    }\n\n    if (value === '}') {\n      const brace = braces[braces.length - 1];\n\n      if (opts.nobrace === true || !brace) {\n        push({\n          type: 'text',\n          value,\n          output: value\n        });\n        continue;\n      }\n\n      let output = ')';\n\n      if (brace.dots === true) {\n        const arr = tokens.slice();\n        const range = [];\n\n        for (let i = arr.length - 1; i >= 0; i--) {\n          tokens.pop();\n\n          if (arr[i].type === 'brace') {\n            break;\n          }\n\n          if (arr[i].type !== 'dots') {\n            range.unshift(arr[i].value);\n          }\n        }\n\n        output = expandRange(range, opts);\n        state.backtrack = true;\n      }\n\n      if (brace.comma !== true && brace.dots !== true) {\n        const out = state.output.slice(0, brace.outputIndex);\n        const toks = state.tokens.slice(brace.tokensIndex);\n        brace.value = brace.output = '\\\\{';\n        value = output = '\\\\}';\n        state.output = out;\n\n        for (const t of toks) {\n          state.output += t.output || t.value;\n        }\n      }\n\n      push({\n        type: 'brace',\n        value,\n        output\n      });\n      decrement('braces');\n      braces.pop();\n      continue;\n    }\n    /**\n     * Pipes\n     */\n\n\n    if (value === '|') {\n      if (extglobs.length > 0) {\n        extglobs[extglobs.length - 1].conditions++;\n      }\n\n      push({\n        type: 'text',\n        value\n      });\n      continue;\n    }\n    /**\n     * Commas\n     */\n\n\n    if (value === ',') {\n      let output = value;\n      const brace = braces[braces.length - 1];\n\n      if (brace && stack[stack.length - 1] === 'braces') {\n        brace.comma = true;\n        output = '|';\n      }\n\n      push({\n        type: 'comma',\n        value,\n        output\n      });\n      continue;\n    }\n    /**\n     * Slashes\n     */\n\n\n    if (value === '/') {\n      // if the beginning of the glob is \"./\", advance the start\n      // to the current index, and don't add the \"./\" characters\n      // to the state. This greatly simplifies lookbehinds when\n      // checking for BOS characters like \"!\" and \".\" (not \"./\")\n      if (prev.type === 'dot' && state.index === state.start + 1) {\n        state.start = state.index + 1;\n        state.consumed = '';\n        state.output = '';\n        tokens.pop();\n        prev = bos; // reset \"prev\" to the first token\n\n        continue;\n      }\n\n      push({\n        type: 'slash',\n        value,\n        output: SLASH_LITERAL\n      });\n      continue;\n    }\n    /**\n     * Dots\n     */\n\n\n    if (value === '.') {\n      if (state.braces > 0 && prev.type === 'dot') {\n        if (prev.value === '.') prev.output = DOT_LITERAL;\n        const brace = braces[braces.length - 1];\n        prev.type = 'dots';\n        prev.output += value;\n        prev.value += value;\n        brace.dots = true;\n        continue;\n      }\n\n      if (state.braces + state.parens === 0 && prev.type !== 'bos' && prev.type !== 'slash') {\n        push({\n          type: 'text',\n          value,\n          output: DOT_LITERAL\n        });\n        continue;\n      }\n\n      push({\n        type: 'dot',\n        value,\n        output: DOT_LITERAL\n      });\n      continue;\n    }\n    /**\n     * Question marks\n     */\n\n\n    if (value === '?') {\n      const isGroup = prev && prev.value === '(';\n\n      if (!isGroup && opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        extglobOpen('qmark', value);\n        continue;\n      }\n\n      if (prev && prev.type === 'paren') {\n        const next = peek();\n        let output = value;\n\n        if (next === '<' && !utils.supportsLookbehinds()) {\n          throw new Error('Node.js v10 or higher is required for regex lookbehinds');\n        }\n\n        if (prev.value === '(' && !/[!=<:]/.test(next) || next === '<' && !/<([!=]|\\w+>)/.test(remaining())) {\n          output = `\\\\${value}`;\n        }\n\n        push({\n          type: 'text',\n          value,\n          output\n        });\n        continue;\n      }\n\n      if (opts.dot !== true && (prev.type === 'slash' || prev.type === 'bos')) {\n        push({\n          type: 'qmark',\n          value,\n          output: QMARK_NO_DOT\n        });\n        continue;\n      }\n\n      push({\n        type: 'qmark',\n        value,\n        output: QMARK\n      });\n      continue;\n    }\n    /**\n     * Exclamation\n     */\n\n\n    if (value === '!') {\n      if (opts.noextglob !== true && peek() === '(') {\n        if (peek(2) !== '?' || !/[!=<:]/.test(peek(3))) {\n          extglobOpen('negate', value);\n          continue;\n        }\n      }\n\n      if (opts.nonegate !== true && state.index === 0) {\n        negate();\n        continue;\n      }\n    }\n    /**\n     * Plus\n     */\n\n\n    if (value === '+') {\n      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        extglobOpen('plus', value);\n        continue;\n      }\n\n      if (prev && prev.value === '(' || opts.regex === false) {\n        push({\n          type: 'plus',\n          value,\n          output: PLUS_LITERAL\n        });\n        continue;\n      }\n\n      if (prev && (prev.type === 'bracket' || prev.type === 'paren' || prev.type === 'brace') || state.parens > 0) {\n        push({\n          type: 'plus',\n          value\n        });\n        continue;\n      }\n\n      push({\n        type: 'plus',\n        value: PLUS_LITERAL\n      });\n      continue;\n    }\n    /**\n     * Plain text\n     */\n\n\n    if (value === '@') {\n      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        push({\n          type: 'at',\n          extglob: true,\n          value,\n          output: ''\n        });\n        continue;\n      }\n\n      push({\n        type: 'text',\n        value\n      });\n      continue;\n    }\n    /**\n     * Plain text\n     */\n\n\n    if (value !== '*') {\n      if (value === '$' || value === '^') {\n        value = `\\\\${value}`;\n      }\n\n      const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());\n\n      if (match) {\n        value += match[0];\n        state.index += match[0].length;\n      }\n\n      push({\n        type: 'text',\n        value\n      });\n      continue;\n    }\n    /**\n     * Stars\n     */\n\n\n    if (prev && (prev.type === 'globstar' || prev.star === true)) {\n      prev.type = 'star';\n      prev.star = true;\n      prev.value += value;\n      prev.output = star;\n      state.backtrack = true;\n      state.globstar = true;\n      consume(value);\n      continue;\n    }\n\n    let rest = remaining();\n\n    if (opts.noextglob !== true && /^\\([^?]/.test(rest)) {\n      extglobOpen('star', value);\n      continue;\n    }\n\n    if (prev.type === 'star') {\n      if (opts.noglobstar === true) {\n        consume(value);\n        continue;\n      }\n\n      const prior = prev.prev;\n      const before = prior.prev;\n      const isStart = prior.type === 'slash' || prior.type === 'bos';\n      const afterStar = before && (before.type === 'star' || before.type === 'globstar');\n\n      if (opts.bash === true && (!isStart || rest[0] && rest[0] !== '/')) {\n        push({\n          type: 'star',\n          value,\n          output: ''\n        });\n        continue;\n      }\n\n      const isBrace = state.braces > 0 && (prior.type === 'comma' || prior.type === 'brace');\n      const isExtglob = extglobs.length && (prior.type === 'pipe' || prior.type === 'paren');\n\n      if (!isStart && prior.type !== 'paren' && !isBrace && !isExtglob) {\n        push({\n          type: 'star',\n          value,\n          output: ''\n        });\n        continue;\n      } // strip consecutive `/**/`\n\n\n      while (rest.slice(0, 3) === '/**') {\n        const after = input[state.index + 4];\n\n        if (after && after !== '/') {\n          break;\n        }\n\n        rest = rest.slice(3);\n        consume('/**', 3);\n      }\n\n      if (prior.type === 'bos' && eos()) {\n        prev.type = 'globstar';\n        prev.value += value;\n        prev.output = globstar(opts);\n        state.output = prev.output;\n        state.globstar = true;\n        consume(value);\n        continue;\n      }\n\n      if (prior.type === 'slash' && prior.prev.type !== 'bos' && !afterStar && eos()) {\n        state.output = state.output.slice(0, -(prior.output + prev.output).length);\n        prior.output = `(?:${prior.output}`;\n        prev.type = 'globstar';\n        prev.output = globstar(opts) + (opts.strictSlashes ? ')' : '|$)');\n        prev.value += value;\n        state.globstar = true;\n        state.output += prior.output + prev.output;\n        consume(value);\n        continue;\n      }\n\n      if (prior.type === 'slash' && prior.prev.type !== 'bos' && rest[0] === '/') {\n        const end = rest[1] !== void 0 ? '|$' : '';\n        state.output = state.output.slice(0, -(prior.output + prev.output).length);\n        prior.output = `(?:${prior.output}`;\n        prev.type = 'globstar';\n        prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;\n        prev.value += value;\n        state.output += prior.output + prev.output;\n        state.globstar = true;\n        consume(value + advance());\n        push({\n          type: 'slash',\n          value: '/',\n          output: ''\n        });\n        continue;\n      }\n\n      if (prior.type === 'bos' && rest[0] === '/') {\n        prev.type = 'globstar';\n        prev.value += value;\n        prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;\n        state.output = prev.output;\n        state.globstar = true;\n        consume(value + advance());\n        push({\n          type: 'slash',\n          value: '/',\n          output: ''\n        });\n        continue;\n      } // remove single star from output\n\n\n      state.output = state.output.slice(0, -prev.output.length); // reset previous token to globstar\n\n      prev.type = 'globstar';\n      prev.output = globstar(opts);\n      prev.value += value; // reset output with globstar\n\n      state.output += prev.output;\n      state.globstar = true;\n      consume(value);\n      continue;\n    }\n\n    const token = {\n      type: 'star',\n      value,\n      output: star\n    };\n\n    if (opts.bash === true) {\n      token.output = '.*?';\n\n      if (prev.type === 'bos' || prev.type === 'slash') {\n        token.output = nodot + token.output;\n      }\n\n      push(token);\n      continue;\n    }\n\n    if (prev && (prev.type === 'bracket' || prev.type === 'paren') && opts.regex === true) {\n      token.output = value;\n      push(token);\n      continue;\n    }\n\n    if (state.index === state.start || prev.type === 'slash' || prev.type === 'dot') {\n      if (prev.type === 'dot') {\n        state.output += NO_DOT_SLASH;\n        prev.output += NO_DOT_SLASH;\n      } else if (opts.dot === true) {\n        state.output += NO_DOTS_SLASH;\n        prev.output += NO_DOTS_SLASH;\n      } else {\n        state.output += nodot;\n        prev.output += nodot;\n      }\n\n      if (peek() !== '*') {\n        state.output += ONE_CHAR;\n        prev.output += ONE_CHAR;\n      }\n    }\n\n    push(token);\n  }\n\n  while (state.brackets > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ']'));\n    state.output = utils.escapeLast(state.output, '[');\n    decrement('brackets');\n  }\n\n  while (state.parens > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ')'));\n    state.output = utils.escapeLast(state.output, '(');\n    decrement('parens');\n  }\n\n  while (state.braces > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', '}'));\n    state.output = utils.escapeLast(state.output, '{');\n    decrement('braces');\n  }\n\n  if (opts.strictSlashes !== true && (prev.type === 'star' || prev.type === 'bracket')) {\n    push({\n      type: 'maybe_slash',\n      value: '',\n      output: `${SLASH_LITERAL}?`\n    });\n  } // rebuild the output if we had to backtrack at any point\n\n\n  if (state.backtrack === true) {\n    state.output = '';\n\n    for (const token of state.tokens) {\n      state.output += token.output != null ? token.output : token.value;\n\n      if (token.suffix) {\n        state.output += token.suffix;\n      }\n    }\n  }\n\n  return state;\n};\n/**\n * Fast paths for creating regular expressions for common glob patterns.\n * This can significantly speed up processing and has very little downside\n * impact when none of the fast paths match.\n */\n\n\nparse.fastpaths = (input, options) => {\n  const opts = { ...options\n  };\n  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n  const len = input.length;\n\n  if (len > max) {\n    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);\n  }\n\n  input = REPLACEMENTS[input] || input;\n  const win32 = utils.isWindows(options); // create constants based on platform, for windows or posix\n\n  const {\n    DOT_LITERAL,\n    SLASH_LITERAL,\n    ONE_CHAR,\n    DOTS_SLASH,\n    NO_DOT,\n    NO_DOTS,\n    NO_DOTS_SLASH,\n    STAR,\n    START_ANCHOR\n  } = constants.globChars(win32);\n  const nodot = opts.dot ? NO_DOTS : NO_DOT;\n  const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;\n  const capture = opts.capture ? '' : '?:';\n  const state = {\n    negated: false,\n    prefix: ''\n  };\n  let star = opts.bash === true ? '.*?' : STAR;\n\n  if (opts.capture) {\n    star = `(${star})`;\n  }\n\n  const globstar = opts => {\n    if (opts.noglobstar === true) return star;\n    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;\n  };\n\n  const create = str => {\n    switch (str) {\n      case '*':\n        return `${nodot}${ONE_CHAR}${star}`;\n\n      case '.*':\n        return `${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '*.*':\n        return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '*/*':\n        return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;\n\n      case '**':\n        return nodot + globstar(opts);\n\n      case '**/*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;\n\n      case '**/*.*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '**/.*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      default:\n        {\n          const match = /^(.*?)\\.(\\w+)$/.exec(str);\n          if (!match) return;\n          const source = create(match[1]);\n          if (!source) return;\n          return source + DOT_LITERAL + match[2];\n        }\n    }\n  };\n\n  const output = utils.removePrefix(input, state);\n  let source = create(output);\n\n  if (source && opts.strictSlashes !== true) {\n    source += `${SLASH_LITERAL}?`;\n  }\n\n  return source;\n};\n\nmodule.exports = parse;","'use strict';\n\nconst path = require('path');\n\nconst scan = require('./scan');\n\nconst parse = require('./parse');\n\nconst utils = require('./utils');\n\nconst constants = require('./constants');\n\nconst isObject = val => val && typeof val === 'object' && !Array.isArray(val);\n/**\n * Creates a matcher function from one or more glob patterns. The\n * returned function takes a string to match as its first argument,\n * and returns true if the string is a match. The returned matcher\n * function also takes a boolean as the second argument that, when true,\n * returns an object with additional information.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch(glob[, options]);\n *\n * const isMatch = picomatch('*.!(*a)');\n * console.log(isMatch('a.a')); //=> false\n * console.log(isMatch('a.b')); //=> true\n * ```\n * @name picomatch\n * @param {String|Array} `globs` One or more glob patterns.\n * @param {Object=} `options`\n * @return {Function=} Returns a matcher function.\n * @api public\n */\n\n\nconst picomatch = (glob, options, returnState = false) => {\n  if (Array.isArray(glob)) {\n    const fns = glob.map(input => picomatch(input, options, returnState));\n\n    const arrayMatcher = str => {\n      for (const isMatch of fns) {\n        const state = isMatch(str);\n        if (state) return state;\n      }\n\n      return false;\n    };\n\n    return arrayMatcher;\n  }\n\n  const isState = isObject(glob) && glob.tokens && glob.input;\n\n  if (glob === '' || typeof glob !== 'string' && !isState) {\n    throw new TypeError('Expected pattern to be a non-empty string');\n  }\n\n  const opts = options || {};\n  const posix = utils.isWindows(options);\n  const regex = isState ? picomatch.compileRe(glob, options) : picomatch.makeRe(glob, options, false, true);\n  const state = regex.state;\n  delete regex.state;\n\n  let isIgnored = () => false;\n\n  if (opts.ignore) {\n    const ignoreOpts = { ...options,\n      ignore: null,\n      onMatch: null,\n      onResult: null\n    };\n    isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);\n  }\n\n  const matcher = (input, returnObject = false) => {\n    const {\n      isMatch,\n      match,\n      output\n    } = picomatch.test(input, regex, options, {\n      glob,\n      posix\n    });\n    const result = {\n      glob,\n      state,\n      regex,\n      posix,\n      input,\n      output,\n      match,\n      isMatch\n    };\n\n    if (typeof opts.onResult === 'function') {\n      opts.onResult(result);\n    }\n\n    if (isMatch === false) {\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (isIgnored(input)) {\n      if (typeof opts.onIgnore === 'function') {\n        opts.onIgnore(result);\n      }\n\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (typeof opts.onMatch === 'function') {\n      opts.onMatch(result);\n    }\n\n    return returnObject ? result : true;\n  };\n\n  if (returnState) {\n    matcher.state = state;\n  }\n\n  return matcher;\n};\n/**\n * Test `input` with the given `regex`. This is used by the main\n * `picomatch()` function to test the input string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.test(input, regex[, options]);\n *\n * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\\/([^/]*?))$/));\n * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp} `regex`\n * @return {Object} Returns an object with matching info.\n * @api public\n */\n\n\npicomatch.test = (input, regex, options, {\n  glob,\n  posix\n} = {}) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected input to be a string');\n  }\n\n  if (input === '') {\n    return {\n      isMatch: false,\n      output: ''\n    };\n  }\n\n  const opts = options || {};\n  const format = opts.format || (posix ? utils.toPosixSlashes : null);\n  let match = input === glob;\n  let output = match && format ? format(input) : input;\n\n  if (match === false) {\n    output = format ? format(input) : input;\n    match = output === glob;\n  }\n\n  if (match === false || opts.capture === true) {\n    if (opts.matchBase === true || opts.basename === true) {\n      match = picomatch.matchBase(input, regex, options, posix);\n    } else {\n      match = regex.exec(output);\n    }\n  }\n\n  return {\n    isMatch: Boolean(match),\n    match,\n    output\n  };\n};\n/**\n * Match the basename of a filepath.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.matchBase(input, glob[, options]);\n * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).\n * @return {Boolean}\n * @api public\n */\n\n\npicomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {\n  const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);\n  return regex.test(path.basename(input));\n};\n/**\n * Returns true if **any** of the given glob `patterns` match the specified `string`.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.isMatch(string, patterns[, options]);\n *\n * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true\n * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false\n * ```\n * @param {String|Array} str The string to test.\n * @param {String|Array} patterns One or more glob patterns to use for matching.\n * @param {Object} [options] See available [options](#options).\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\n\npicomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);\n/**\n * Parse a glob pattern to create the source string for a regular\n * expression.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const result = picomatch.parse(pattern[, options]);\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object} Returns an object with useful properties and output to be used as a regex source string.\n * @api public\n */\n\n\npicomatch.parse = (pattern, options) => {\n  if (Array.isArray(pattern)) return pattern.map(p => picomatch.parse(p, options));\n  return parse(pattern, { ...options,\n    fastpaths: false\n  });\n};\n/**\n * Scan a glob pattern to separate the pattern into segments.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.scan(input[, options]);\n *\n * const result = picomatch.scan('!./foo/*.js');\n * console.log(result);\n * { prefix: '!./',\n *   input: '!./foo/*.js',\n *   start: 3,\n *   base: 'foo',\n *   glob: '*.js',\n *   isBrace: false,\n *   isBracket: false,\n *   isGlob: true,\n *   isExtglob: false,\n *   isGlobstar: false,\n *   negated: true }\n * ```\n * @param {String} `input` Glob pattern to scan.\n * @param {Object} `options`\n * @return {Object} Returns an object with\n * @api public\n */\n\n\npicomatch.scan = (input, options) => scan(input, options);\n/**\n * Compile a regular expression from the `state` object returned by the\n * [parse()](#parse) method.\n *\n * @param {Object} `state`\n * @param {Object} `options`\n * @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.\n * @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.\n * @return {RegExp}\n * @api public\n */\n\n\npicomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {\n  if (returnOutput === true) {\n    return state.output;\n  }\n\n  const opts = options || {};\n  const prepend = opts.contains ? '' : '^';\n  const append = opts.contains ? '' : '$';\n  let source = `${prepend}(?:${state.output})${append}`;\n\n  if (state && state.negated === true) {\n    source = `^(?!${source}).*$`;\n  }\n\n  const regex = picomatch.toRegex(source, options);\n\n  if (returnState === true) {\n    regex.state = state;\n  }\n\n  return regex;\n};\n/**\n * Create a regular expression from a parsed glob pattern.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const state = picomatch.parse('*.js');\n * // picomatch.compileRe(state[, options]);\n *\n * console.log(picomatch.compileRe(state));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `state` The object returned from the `.parse` method.\n * @param {Object} `options`\n * @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.\n * @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.\n * @return {RegExp} Returns a regex created from the given pattern.\n * @api public\n */\n\n\npicomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {\n  if (!input || typeof input !== 'string') {\n    throw new TypeError('Expected a non-empty string');\n  }\n\n  let parsed = {\n    negated: false,\n    fastpaths: true\n  };\n\n  if (options.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {\n    parsed.output = parse.fastpaths(input, options);\n  }\n\n  if (!parsed.output) {\n    parsed = parse(input, options);\n  }\n\n  return picomatch.compileRe(parsed, options, returnOutput, returnState);\n};\n/**\n * Create a regular expression from the given regex source string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.toRegex(source[, options]);\n *\n * const { output } = picomatch.parse('*.js');\n * console.log(picomatch.toRegex(output));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `source` Regular expression source string.\n * @param {Object} `options`\n * @return {RegExp}\n * @api public\n */\n\n\npicomatch.toRegex = (source, options) => {\n  try {\n    const opts = options || {};\n    return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''));\n  } catch (err) {\n    if (options && options.debug === true) throw err;\n    return /$^/;\n  }\n};\n/**\n * Picomatch constants.\n * @return {Object}\n */\n\n\npicomatch.constants = constants;\n/**\n * Expose \"picomatch\"\n */\n\nmodule.exports = picomatch;","'use strict';\n\nconst utils = require('./utils');\n\nconst {\n  CHAR_ASTERISK,\n\n  /* * */\n  CHAR_AT,\n\n  /* @ */\n  CHAR_BACKWARD_SLASH,\n\n  /* \\ */\n  CHAR_COMMA,\n\n  /* , */\n  CHAR_DOT,\n\n  /* . */\n  CHAR_EXCLAMATION_MARK,\n\n  /* ! */\n  CHAR_FORWARD_SLASH,\n\n  /* / */\n  CHAR_LEFT_CURLY_BRACE,\n\n  /* { */\n  CHAR_LEFT_PARENTHESES,\n\n  /* ( */\n  CHAR_LEFT_SQUARE_BRACKET,\n\n  /* [ */\n  CHAR_PLUS,\n\n  /* + */\n  CHAR_QUESTION_MARK,\n\n  /* ? */\n  CHAR_RIGHT_CURLY_BRACE,\n\n  /* } */\n  CHAR_RIGHT_PARENTHESES,\n\n  /* ) */\n  CHAR_RIGHT_SQUARE_BRACKET\n  /* ] */\n\n} = require('./constants');\n\nconst isPathSeparator = code => {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n};\n\nconst depth = token => {\n  if (token.isPrefix !== true) {\n    token.depth = token.isGlobstar ? Infinity : 1;\n  }\n};\n/**\n * Quickly scans a glob pattern and returns an object with a handful of\n * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),\n * `glob` (the actual pattern), `negated` (true if the path starts with `!` but not\n * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).\n *\n * ```js\n * const pm = require('picomatch');\n * console.log(pm.scan('foo/bar/*.js'));\n * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {Object} Returns an object with tokens and regex source string.\n * @api public\n */\n\n\nconst scan = (input, options) => {\n  const opts = options || {};\n  const length = input.length - 1;\n  const scanToEnd = opts.parts === true || opts.scanToEnd === true;\n  const slashes = [];\n  const tokens = [];\n  const parts = [];\n  let str = input;\n  let index = -1;\n  let start = 0;\n  let lastIndex = 0;\n  let isBrace = false;\n  let isBracket = false;\n  let isGlob = false;\n  let isExtglob = false;\n  let isGlobstar = false;\n  let braceEscaped = false;\n  let backslashes = false;\n  let negated = false;\n  let negatedExtglob = false;\n  let finished = false;\n  let braces = 0;\n  let prev;\n  let code;\n  let token = {\n    value: '',\n    depth: 0,\n    isGlob: false\n  };\n\n  const eos = () => index >= length;\n\n  const peek = () => str.charCodeAt(index + 1);\n\n  const advance = () => {\n    prev = code;\n    return str.charCodeAt(++index);\n  };\n\n  while (index < length) {\n    code = advance();\n    let next;\n\n    if (code === CHAR_BACKWARD_SLASH) {\n      backslashes = token.backslashes = true;\n      code = advance();\n\n      if (code === CHAR_LEFT_CURLY_BRACE) {\n        braceEscaped = true;\n      }\n\n      continue;\n    }\n\n    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {\n      braces++;\n\n      while (eos() !== true && (code = advance())) {\n        if (code === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (code === CHAR_LEFT_CURLY_BRACE) {\n          braces++;\n          continue;\n        }\n\n        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (braceEscaped !== true && code === CHAR_COMMA) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (code === CHAR_RIGHT_CURLY_BRACE) {\n          braces--;\n\n          if (braces === 0) {\n            braceEscaped = false;\n            isBrace = token.isBrace = true;\n            finished = true;\n            break;\n          }\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_FORWARD_SLASH) {\n      slashes.push(index);\n      tokens.push(token);\n      token = {\n        value: '',\n        depth: 0,\n        isGlob: false\n      };\n      if (finished === true) continue;\n\n      if (prev === CHAR_DOT && index === start + 1) {\n        start += 2;\n        continue;\n      }\n\n      lastIndex = index + 1;\n      continue;\n    }\n\n    if (opts.noext !== true) {\n      const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;\n\n      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {\n        isGlob = token.isGlob = true;\n        isExtglob = token.isExtglob = true;\n        finished = true;\n\n        if (code === CHAR_EXCLAMATION_MARK && index === start) {\n          negatedExtglob = true;\n        }\n\n        if (scanToEnd === true) {\n          while (eos() !== true && (code = advance())) {\n            if (code === CHAR_BACKWARD_SLASH) {\n              backslashes = token.backslashes = true;\n              code = advance();\n              continue;\n            }\n\n            if (code === CHAR_RIGHT_PARENTHESES) {\n              isGlob = token.isGlob = true;\n              finished = true;\n              break;\n            }\n          }\n\n          continue;\n        }\n\n        break;\n      }\n    }\n\n    if (code === CHAR_ASTERISK) {\n      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_QUESTION_MARK) {\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_LEFT_SQUARE_BRACKET) {\n      while (eos() !== true && (next = advance())) {\n        if (next === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          isBracket = token.isBracket = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n          break;\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {\n      negated = token.negated = true;\n      start++;\n      continue;\n    }\n\n    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {\n      isGlob = token.isGlob = true;\n\n      if (scanToEnd === true) {\n        while (eos() !== true && (code = advance())) {\n          if (code === CHAR_LEFT_PARENTHESES) {\n            backslashes = token.backslashes = true;\n            code = advance();\n            continue;\n          }\n\n          if (code === CHAR_RIGHT_PARENTHESES) {\n            finished = true;\n            break;\n          }\n        }\n\n        continue;\n      }\n\n      break;\n    }\n\n    if (isGlob === true) {\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n  }\n\n  if (opts.noext === true) {\n    isExtglob = false;\n    isGlob = false;\n  }\n\n  let base = str;\n  let prefix = '';\n  let glob = '';\n\n  if (start > 0) {\n    prefix = str.slice(0, start);\n    str = str.slice(start);\n    lastIndex -= start;\n  }\n\n  if (base && isGlob === true && lastIndex > 0) {\n    base = str.slice(0, lastIndex);\n    glob = str.slice(lastIndex);\n  } else if (isGlob === true) {\n    base = '';\n    glob = str;\n  } else {\n    base = str;\n  }\n\n  if (base && base !== '' && base !== '/' && base !== str) {\n    if (isPathSeparator(base.charCodeAt(base.length - 1))) {\n      base = base.slice(0, -1);\n    }\n  }\n\n  if (opts.unescape === true) {\n    if (glob) glob = utils.removeBackslashes(glob);\n\n    if (base && backslashes === true) {\n      base = utils.removeBackslashes(base);\n    }\n  }\n\n  const state = {\n    prefix,\n    input,\n    start,\n    base,\n    glob,\n    isBrace,\n    isBracket,\n    isGlob,\n    isExtglob,\n    isGlobstar,\n    negated,\n    negatedExtglob\n  };\n\n  if (opts.tokens === true) {\n    state.maxDepth = 0;\n\n    if (!isPathSeparator(code)) {\n      tokens.push(token);\n    }\n\n    state.tokens = tokens;\n  }\n\n  if (opts.parts === true || opts.tokens === true) {\n    let prevIndex;\n\n    for (let idx = 0; idx < slashes.length; idx++) {\n      const n = prevIndex ? prevIndex + 1 : start;\n      const i = slashes[idx];\n      const value = input.slice(n, i);\n\n      if (opts.tokens) {\n        if (idx === 0 && start !== 0) {\n          tokens[idx].isPrefix = true;\n          tokens[idx].value = prefix;\n        } else {\n          tokens[idx].value = value;\n        }\n\n        depth(tokens[idx]);\n        state.maxDepth += tokens[idx].depth;\n      }\n\n      if (idx !== 0 || value !== '') {\n        parts.push(value);\n      }\n\n      prevIndex = i;\n    }\n\n    if (prevIndex && prevIndex + 1 < input.length) {\n      const value = input.slice(prevIndex + 1);\n      parts.push(value);\n\n      if (opts.tokens) {\n        tokens[tokens.length - 1].value = value;\n        depth(tokens[tokens.length - 1]);\n        state.maxDepth += tokens[tokens.length - 1].depth;\n      }\n    }\n\n    state.slashes = slashes;\n    state.parts = parts;\n  }\n\n  return state;\n};\n\nmodule.exports = scan;","'use strict';\n\nconst path = require('path');\n\nconst win32 = process.platform === 'win32';\n\nconst {\n  REGEX_BACKSLASH,\n  REGEX_REMOVE_BACKSLASH,\n  REGEX_SPECIAL_CHARS,\n  REGEX_SPECIAL_CHARS_GLOBAL\n} = require('./constants');\n\nexports.isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);\n\nexports.hasRegexChars = str => REGEX_SPECIAL_CHARS.test(str);\n\nexports.isRegexChar = str => str.length === 1 && exports.hasRegexChars(str);\n\nexports.escapeRegex = str => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\\\$1');\n\nexports.toPosixSlashes = str => str.replace(REGEX_BACKSLASH, '/');\n\nexports.removeBackslashes = str => {\n  return str.replace(REGEX_REMOVE_BACKSLASH, match => {\n    return match === '\\\\' ? '' : match;\n  });\n};\n\nexports.supportsLookbehinds = () => {\n  const segs = process.version.slice(1).split('.').map(Number);\n\n  if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {\n    return true;\n  }\n\n  return false;\n};\n\nexports.isWindows = options => {\n  if (options && typeof options.windows === 'boolean') {\n    return options.windows;\n  }\n\n  return win32 === true || path.sep === '\\\\';\n};\n\nexports.escapeLast = (input, char, lastIdx) => {\n  const idx = input.lastIndexOf(char, lastIdx);\n  if (idx === -1) return input;\n  if (input[idx - 1] === '\\\\') return exports.escapeLast(input, char, idx - 1);\n  return `${input.slice(0, idx)}\\\\${input.slice(idx)}`;\n};\n\nexports.removePrefix = (input, state = {}) => {\n  let output = input;\n\n  if (output.startsWith('./')) {\n    output = output.slice(2);\n    state.prefix = './';\n  }\n\n  return output;\n};\n\nexports.wrapOutput = (input, state = {}, options = {}) => {\n  const prepend = options.contains ? '' : '^';\n  const append = options.contains ? '' : '$';\n  let output = `${prepend}(?:${input})${append}`;\n\n  if (state.negated === true) {\n    output = `(?:^(?!${output}).*$)`;\n  }\n\n  return output;\n};","/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise;\nmodule.exports = typeof queueMicrotask === 'function' ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global) // reuse resolved promise, and allocate it lazily\n: cb => (promise || (promise = Promise.resolve())).then(cb).catch(err => setTimeout(() => {\n  throw err;\n}, 0));","'use strict';\n\nfunction reusify(Constructor) {\n  var head = new Constructor();\n  var tail = head;\n\n  function get() {\n    var current = head;\n\n    if (current.next) {\n      head = current.next;\n    } else {\n      head = new Constructor();\n      tail = head;\n    }\n\n    current.next = null;\n    return current;\n  }\n\n  function release(obj) {\n    tail.next = obj;\n    tail = obj;\n  }\n\n  return {\n    get: get,\n    release: release\n  };\n}\n\nmodule.exports = reusify;","/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nmodule.exports = runParallel;\n\nconst queueMicrotask = require('queue-microtask');\n\nfunction runParallel(tasks, cb) {\n  let results, pending, keys;\n  let isSync = true;\n\n  if (Array.isArray(tasks)) {\n    results = [];\n    pending = tasks.length;\n  } else {\n    keys = Object.keys(tasks);\n    results = {};\n    pending = keys.length;\n  }\n\n  function done(err) {\n    function end() {\n      if (cb) cb(err, results);\n      cb = null;\n    }\n\n    if (isSync) queueMicrotask(end);else end();\n  }\n\n  function each(i, err, result) {\n    results[i] = result;\n\n    if (--pending === 0 || err) {\n      done(err);\n    }\n  }\n\n  if (!pending) {\n    // empty\n    done(null);\n  } else if (keys) {\n    // object\n    keys.forEach(function (key) {\n      tasks[key](function (err, result) {\n        each(key, err, result);\n      });\n    });\n  } else {\n    // array\n    tasks.forEach(function (task, i) {\n      task(function (err, result) {\n        each(i, err, result);\n      });\n    });\n  }\n\n  isSync = false;\n}","/*!\n * to-regex-range <https://github.com/micromatch/to-regex-range>\n *\n * Copyright (c) 2015-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n'use strict';\n\nconst isNumber = require('is-number');\n\nconst toRegexRange = (min, max, options) => {\n  if (isNumber(min) === false) {\n    throw new TypeError('toRegexRange: expected the first argument to be a number');\n  }\n\n  if (max === void 0 || min === max) {\n    return String(min);\n  }\n\n  if (isNumber(max) === false) {\n    throw new TypeError('toRegexRange: expected the second argument to be a number.');\n  }\n\n  let opts = {\n    relaxZeros: true,\n    ...options\n  };\n\n  if (typeof opts.strictZeros === 'boolean') {\n    opts.relaxZeros = opts.strictZeros === false;\n  }\n\n  let relax = String(opts.relaxZeros);\n  let shorthand = String(opts.shorthand);\n  let capture = String(opts.capture);\n  let wrap = String(opts.wrap);\n  let cacheKey = min + ':' + max + '=' + relax + shorthand + capture + wrap;\n\n  if (toRegexRange.cache.hasOwnProperty(cacheKey)) {\n    return toRegexRange.cache[cacheKey].result;\n  }\n\n  let a = Math.min(min, max);\n  let b = Math.max(min, max);\n\n  if (Math.abs(a - b) === 1) {\n    let result = min + '|' + max;\n\n    if (opts.capture) {\n      return `(${result})`;\n    }\n\n    if (opts.wrap === false) {\n      return result;\n    }\n\n    return `(?:${result})`;\n  }\n\n  let isPadded = hasPadding(min) || hasPadding(max);\n  let state = {\n    min,\n    max,\n    a,\n    b\n  };\n  let positives = [];\n  let negatives = [];\n\n  if (isPadded) {\n    state.isPadded = isPadded;\n    state.maxLen = String(state.max).length;\n  }\n\n  if (a < 0) {\n    let newMin = b < 0 ? Math.abs(b) : 1;\n    negatives = splitToPatterns(newMin, Math.abs(a), state, opts);\n    a = state.a = 0;\n  }\n\n  if (b >= 0) {\n    positives = splitToPatterns(a, b, state, opts);\n  }\n\n  state.negatives = negatives;\n  state.positives = positives;\n  state.result = collatePatterns(negatives, positives, opts);\n\n  if (opts.capture === true) {\n    state.result = `(${state.result})`;\n  } else if (opts.wrap !== false && positives.length + negatives.length > 1) {\n    state.result = `(?:${state.result})`;\n  }\n\n  toRegexRange.cache[cacheKey] = state;\n  return state.result;\n};\n\nfunction collatePatterns(neg, pos, options) {\n  let onlyNegative = filterPatterns(neg, pos, '-', false, options) || [];\n  let onlyPositive = filterPatterns(pos, neg, '', false, options) || [];\n  let intersected = filterPatterns(neg, pos, '-?', true, options) || [];\n  let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);\n  return subpatterns.join('|');\n}\n\nfunction splitToRanges(min, max) {\n  let nines = 1;\n  let zeros = 1;\n  let stop = countNines(min, nines);\n  let stops = new Set([max]);\n\n  while (min <= stop && stop <= max) {\n    stops.add(stop);\n    nines += 1;\n    stop = countNines(min, nines);\n  }\n\n  stop = countZeros(max + 1, zeros) - 1;\n\n  while (min < stop && stop <= max) {\n    stops.add(stop);\n    zeros += 1;\n    stop = countZeros(max + 1, zeros) - 1;\n  }\n\n  stops = [...stops];\n  stops.sort(compare);\n  return stops;\n}\n/**\n * Convert a range to a regex pattern\n * @param {Number} `start`\n * @param {Number} `stop`\n * @return {String}\n */\n\n\nfunction rangeToPattern(start, stop, options) {\n  if (start === stop) {\n    return {\n      pattern: start,\n      count: [],\n      digits: 0\n    };\n  }\n\n  let zipped = zip(start, stop);\n  let digits = zipped.length;\n  let pattern = '';\n  let count = 0;\n\n  for (let i = 0; i < digits; i++) {\n    let [startDigit, stopDigit] = zipped[i];\n\n    if (startDigit === stopDigit) {\n      pattern += startDigit;\n    } else if (startDigit !== '0' || stopDigit !== '9') {\n      pattern += toCharacterClass(startDigit, stopDigit, options);\n    } else {\n      count++;\n    }\n  }\n\n  if (count) {\n    pattern += options.shorthand === true ? '\\\\d' : '[0-9]';\n  }\n\n  return {\n    pattern,\n    count: [count],\n    digits\n  };\n}\n\nfunction splitToPatterns(min, max, tok, options) {\n  let ranges = splitToRanges(min, max);\n  let tokens = [];\n  let start = min;\n  let prev;\n\n  for (let i = 0; i < ranges.length; i++) {\n    let max = ranges[i];\n    let obj = rangeToPattern(String(start), String(max), options);\n    let zeros = '';\n\n    if (!tok.isPadded && prev && prev.pattern === obj.pattern) {\n      if (prev.count.length > 1) {\n        prev.count.pop();\n      }\n\n      prev.count.push(obj.count[0]);\n      prev.string = prev.pattern + toQuantifier(prev.count);\n      start = max + 1;\n      continue;\n    }\n\n    if (tok.isPadded) {\n      zeros = padZeros(max, tok, options);\n    }\n\n    obj.string = zeros + obj.pattern + toQuantifier(obj.count);\n    tokens.push(obj);\n    start = max + 1;\n    prev = obj;\n  }\n\n  return tokens;\n}\n\nfunction filterPatterns(arr, comparison, prefix, intersection, options) {\n  let result = [];\n\n  for (let ele of arr) {\n    let {\n      string\n    } = ele; // only push if _both_ are negative...\n\n    if (!intersection && !contains(comparison, 'string', string)) {\n      result.push(prefix + string);\n    } // or _both_ are positive\n\n\n    if (intersection && contains(comparison, 'string', string)) {\n      result.push(prefix + string);\n    }\n  }\n\n  return result;\n}\n/**\n * Zip strings\n */\n\n\nfunction zip(a, b) {\n  let arr = [];\n\n  for (let i = 0; i < a.length; i++) arr.push([a[i], b[i]]);\n\n  return arr;\n}\n\nfunction compare(a, b) {\n  return a > b ? 1 : b > a ? -1 : 0;\n}\n\nfunction contains(arr, key, val) {\n  return arr.some(ele => ele[key] === val);\n}\n\nfunction countNines(min, len) {\n  return Number(String(min).slice(0, -len) + '9'.repeat(len));\n}\n\nfunction countZeros(integer, zeros) {\n  return integer - integer % Math.pow(10, zeros);\n}\n\nfunction toQuantifier(digits) {\n  let [start = 0, stop = ''] = digits;\n\n  if (stop || start > 1) {\n    return `{${start + (stop ? ',' + stop : '')}}`;\n  }\n\n  return '';\n}\n\nfunction toCharacterClass(a, b, options) {\n  return `[${a}${b - a === 1 ? '' : '-'}${b}]`;\n}\n\nfunction hasPadding(str) {\n  return /^-?(0+)\\d/.test(str);\n}\n\nfunction padZeros(value, tok, options) {\n  if (!tok.isPadded) {\n    return value;\n  }\n\n  let diff = Math.abs(tok.maxLen - String(value).length);\n  let relax = options.relaxZeros !== false;\n\n  switch (diff) {\n    case 0:\n      return '';\n\n    case 1:\n      return relax ? '0?' : '0';\n\n    case 2:\n      return relax ? '0{0,2}' : '00';\n\n    default:\n      {\n        return relax ? `0{0,${diff}}` : `0{${diff}}`;\n      }\n  }\n}\n/**\n * Cache\n */\n\n\ntoRegexRange.cache = {};\n\ntoRegexRange.clearCache = () => toRegexRange.cache = {};\n/**\n * Expose `toRegexRange`\n */\n\n\nmodule.exports = toRegexRange;","import * as fs from \"fs\";\nconst fg = require(\"fast-glob\");\n\nexport function fetchFilesData(data: string[]) {\n  console.log(\"This is File(s):  \" + typeof data);\n}\n\nexport async function fetchDirData(data: string[]) {\n  const scanSelectedDir = (data: string[]) => {\n    return new Promise<string[]>((resolve, reject) => {\n      data?.forEach((d) => {\n        const folders = fg.sync(`${d}/**/`, {\n          onlyFiles: true,\n          dot: true,\n        });\n        resolve(folders);\n      });\n    });\n  };\n  const result = await scanSelectedDir(data);\n  console.log(result);\n}\n\nexport function isDirectory(fileNames: string[]): boolean {\n  let check = false;\n  for (let file of fileNames) {\n    let checkStatus = fs.lstatSync(file).isDirectory() === false ? false : true;\n    if (checkStatus === false) return;\n    check = checkStatus;\n  }\n  return check;\n}\n\nmodule.exports = { fetchFilesData, fetchDirData, isDirectory };\n","module.exports = require(\"child_process\");","module.exports = require(\"electron\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"stream\");","module.exports = require(\"tty\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { app, BrowserWindow, ipcMain, dialog } from \"electron\";\nimport { fetchDirData, fetchFilesData, isDirectory } from \"../utils\";\n// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack\n// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on\n// whether you're running in development or production).\ndeclare const MAIN_WINDOW_WEBPACK_ENTRY: string;\ndeclare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;\n\n// Handle creating/removing shortcuts on Windows when installing/uninstalling.\nif (require(\"electron-squirrel-startup\")) {\n  // eslint-disable-line global-require\n  app.quit();\n}\n\nconst createWindow = (): void => {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    height: 600,\n    width: 800,\n    webPreferences: {\n      contextIsolation: true,\n      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,\n    },\n  });\n\n  // and load the index.html of the app.\n  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);\n\n  // Open the DevTools.\n  mainWindow.webContents.openDevTools();\n};\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on(\"ready\", createWindow);\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on(\"window-all-closed\", () => {\n  if (process.platform !== \"darwin\") {\n    app.quit();\n  }\n});\n\napp.on(\"activate\", () => {\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow();\n  }\n});\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and import them here.\nipcMain.handle(\"upload-files\", async (event, args) => {\n  const dialogButton = await dialog.showOpenDialog({\n    properties: [\n      \"openDirectory\",\n      \"createDirectory\",\n      \"openFile\",\n      \"multiSelections\",\n    ],\n  });\n  // // user selected cancel button to show selection process\n  if (dialogButton.canceled) return;\n  // I should be looking for an array. here is my options\n  const selectedPath: string[] = dialogButton?.filePaths;\n\n  // Is it a Directory | File?\n  if (selectedPath && isDirectory(selectedPath)) {\n    // if Directory? how many?\n    const dir = await fetchDirData(selectedPath);\n    console.log(\"dir: \", dir);\n  } else {\n    console.log(\"files hit\");\n    //fetchFilesData(selectedPath);\n  }\n\n  // If files exist? how many?\n});\n\n// https://stackoverflow.com/questions/15630770/node-js-check-if-path-is-file-or-directory\n"],"names":[],"sourceRoot":""}